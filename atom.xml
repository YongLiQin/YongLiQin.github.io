<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>覃永利的技术博客</title>
  
  <subtitle>Goals determine what I going to be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qinyongli.cn/"/>
  <updated>2019-04-12T04:15:01.775Z</updated>
  <id>http://qinyongli.cn/</id>
  
  <author>
    <name>覃永利</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS严格模式</title>
    <link href="http://qinyongli.cn/2019/04/12/JS%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>http://qinyongli.cn/2019/04/12/JS严格模式/</id>
    <published>2019-04-12T03:57:55.000Z</published>
    <updated>2019-04-12T04:15:01.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>除了正常运行模式，ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p><a id="more"></a><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><ul><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的Javascript做好铺垫。</li></ul><h2 id="进入标志"><a href="#进入标志" class="headerlink" title="进入标志"></a>进入标志</h2><p>进入”严格模式”的标志，是下面这行语句:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br></pre></td></tr></table></figure><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><p>“严格模式”有两种调用方法，适用于不同的场合。</p><h3 id="针对整个脚本文件"><a href="#针对整个脚本文件" class="headerlink" title="针对整个脚本文件"></a>针对整个脚本文件</h3><p>将”use strict”放在脚本文件的第一行，则整个脚本都将以”严格模式”运行。如果这行语句不在第一行，则无效，整个脚本以”正常模式”运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">　　"use strict"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"这是严格模式。"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="针对单个函数"><a href="#针对单个函数" class="headerlink" title="针对单个函数"></a>针对单个函数</h3><p>将”use strict”放在函数体的第一行，则整个函数以”严格模式”运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">　　"use strict"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"这是严格模式。"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>ES6的模块自动采用严格模式，不管有没有在模块头部加上”use strict”。</p><h2 id="严格模式下的限制"><a href="#严格模式下的限制" class="headerlink" title="严格模式下的限制"></a>严格模式下的限制</h2><ul><li>变量必须声明后再使用。</li><li>函数的参数不能有同名属性，否则报错。</li><li>不能使用with语句。</li><li>不能对只读属性赋值，否则报错。</li><li>不能使用前缀0表示八进制，否则报错。</li><li>不能删除不可能删除的属性，否则报错。</li><li>不能删除变量(delete prop)，会报错，只能删除属性(delete global[prop])。</li><li>eval不会在其外层作用域引入变量。</li><li>eval和arguments不能被重新赋值。</li><li>arguments不会自动反映函数参数的变化。</li><li>不能使用arguments.callee。</li><li>不能使用arguments.caller。</li><li>禁止this指向全局对象。</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈。</li><li>增加了保留字(比如protected、static和interface)。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;除了正常运行模式，ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://qinyongli.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>css布局相关</title>
    <link href="http://qinyongli.cn/2019/04/04/css%E5%B8%83%E5%B1%80%E7%9B%B8%E5%85%B3/"/>
    <id>http://qinyongli.cn/2019/04/04/css布局相关/</id>
    <published>2019-04-04T03:16:10.000Z</published>
    <updated>2019-04-04T04:08:04.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>学习前端，了解一点CSS还是有必要的，就算是为了应对面试官，我觉得也需要去略作了解。</p><a id="more"></a><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><h3 id="margin与可视尺寸"><a href="#margin与可视尺寸" class="headerlink" title="margin与可视尺寸"></a>margin与可视尺寸</h3><ul><li>适用于没有设定width/height的普通block的水平元素(float元素 absolut/fixed元素 inline水平, table-cell)</li><li>只适用于水平尺寸</li><li>实现一侧定宽的自适应布局</li></ul><h3 id="margin与占据尺寸"><a href="#margin与占据尺寸" class="headerlink" title="margin与占据尺寸"></a>margin与占据尺寸</h3><ul><li>block/inline-block水平元素均适用</li><li>与有没有设定width/height值无关</li><li>适用于水平方向和垂直方向</li><li>实现滚动容器内上下留白(适用margin)</li></ul><h3 id="margin的百分比"><a href="#margin的百分比" class="headerlink" title="margin的百分比"></a>margin的百分比</h3><ul><li>水平方向百分比/垂直方向百分比</li><li>普通元素百分比/绝对定位元素的百分比</li><li>普通元素的百分比margin都是相对于容器的宽度计算的</li><li>绝对定位的元素的百分比margin是相对于第一个定位祖先元素(absolute/relative/fixed)的宽度计算的</li></ul><h3 id="margin重叠通常特性"><a href="#margin重叠通常特性" class="headerlink" title="margin重叠通常特性"></a>margin重叠通常特性</h3><ul><li>block水平元素(不包括float和absolute元素)</li><li>不考虑writing-mode, 只发生在垂直方向(margin-top/margin-bottom)</li></ul><h3 id="margin重叠的3种情境"><a href="#margin重叠的3种情境" class="headerlink" title="margin重叠的3种情境"></a>margin重叠的3种情境</h3><ul><li>相邻的兄弟元素</li><li>父级和第一个/最后一个子元素</li><li>空的block元素</li></ul><h3 id="margin-top重叠"><a href="#margin-top重叠" class="headerlink" title="margin-top重叠"></a>margin-top重叠</h3><ul><li>父元素非块状格式化上下文</li><li>父元素没有border-top设置</li><li>父元素没有padding-top值</li><li>父元素和第一个子元素之间没有inline元素分隔</li></ul><h3 id="margin-bottom重叠"><a href="#margin-bottom重叠" class="headerlink" title="margin-bottom重叠"></a>margin-bottom重叠</h3><ul><li>父元素非块状格式化上下文</li><li>父元素没有border-top设置</li><li>父元素没有padding-top值</li><li>父元素和第一个子元素之间没有inline元素分隔</li><li>父元素没有height, min-height, max-height限制</li></ul><h3 id="空block元素margin重叠其他条件"><a href="#空block元素margin重叠其他条件" class="headerlink" title="空block元素margin重叠其他条件"></a>空block元素margin重叠其他条件</h3><ul><li>元素没有border设置</li><li>元素没有padding值</li><li>里面没有inline元素</li><li>没有height, 或者min-height</li></ul><h3 id="重叠取值"><a href="#重叠取值" class="headerlink" title="重叠取值"></a>重叠取值</h3><ul><li>正正取大值</li><li>负负最负值</li><li>正负值相加</li></ul><h3 id="理解margin-auto"><a href="#理解margin-auto" class="headerlink" title="理解margin auto"></a>理解margin auto</h3><p>元素有时候, 就算没有设置width或height, 也会自动填充；原本应该填充的尺寸被width/height强制变更, 而margin: auto就是为了填充这个变更的尺寸设计的；如果一侧定值, 一侧auto, auto为剩余空间大小; 如果两侧军均是auto, 则平分剩余空间的；图片为何不居中呢？因为此图片是inline水平, 就算没有width,其也不会占据整个容器；</p><p>absolute与margin居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;<span class="attribute">height</span>: <span class="number">200px</span>; <span class="attribute">position</span>: relative&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0px</span>; <span class="attribute">right</span>: <span class="number">0px</span>; <span class="attribute">bottom</span>: <span class="number">0px</span>; <span class="attribute">left</span>: <span class="number">0px</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span>&#123;<span class="attribute">height</span>: <span class="number">200px</span>; <span class="attribute">position</span>: relative&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0px</span>; <span class="attribute">right</span>: <span class="number">0px</span>; <span class="attribute">bottom</span>: <span class="number">0px</span>; <span class="attribute">left</span>: <span class="number">0px</span>; <span class="attribute">margin</span>: auto&#125;</span><br></pre></td></tr></table></figure><h3 id="margin”无效”"><a href="#margin”无效”" class="headerlink" title="margin”无效”"></a>margin”无效”</h3><ul><li>inline水平元素的垂直margin无效</li><li>margin重叠</li><li>position: absolute与margin(绝对定位元素的非定位方位值”无效”)</li><li>绝对定位的margin值一直有效, 只是不像普通元素那样, 可以和兄弟元素插科打诨</li></ul><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><h4 id="absolute特性"><a href="#absolute特性" class="headerlink" title="absolute特性"></a>absolute特性</h4><ul><li>包裹性</li><li>破坏性</li><li>去浮动</li><li>位置跟随性</li><li>超越overflow</li><li>脱离文档流</li></ul><h4 id="absolute的强大之处"><a href="#absolute的强大之处" class="headerlink" title="absolute的强大之处"></a>absolute的强大之处</h4><p>没有宽度和高度声明实现的全屏自适应效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>; </span><br><span class="line">left: 0; top: 0; right: 0; bottom: 0;//实现布满整个容器</span><br></pre></td></tr></table></figure><h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><h4 id="relative特性"><a href="#relative特性" class="headerlink" title="relative特性"></a>relative特性</h4><ul><li>相对自身</li><li>无浸入(不影响其他盒子模型的定位)(原本的位置还存在)</li></ul><h4 id="relative的作用-限制absolute"><a href="#relative的作用-限制absolute" class="headerlink" title="relative的作用:限制absolute"></a>relative的作用:限制absolute</h4><ul><li>限制left/top/right/bottom定位</li><li>限制z-index层级(可以对fixed的限制有效)</li><li>限制在overflow下的嚣张气焰</li><li>尽量少用relative</li></ul><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><h3 id="float的诞出的初始目的"><a href="#float的诞出的初始目的" class="headerlink" title="float的诞出的初始目的"></a>float的诞出的初始目的</h3><ul><li>文字环绕效果</li></ul><h3 id="float的特性"><a href="#float的特性" class="headerlink" title="float的特性"></a>float的特性</h3><ul><li>包裹性</li><li>破坏性</li><li>脱离文档流</li><li>float浮动去空格</li><li>浮动与display:inline-block化(破坏性造成紧密排列)</li></ul><h3 id="清除浮动-应该应用在其父级元素上"><a href="#清除浮动-应该应用在其父级元素上" class="headerlink" title="清除浮动(应该应用在其父级元素上)"></a>清除浮动(应该应用在其父级元素上)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:’’; </span><br><span class="line"><span class="attribute">display</span>: block; </span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>; </span><br><span class="line"><span class="attribute">clear</span>:both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><h3 id="line-height的定义"><a href="#line-height的定义" class="headerlink" title="line-height的定义"></a>line-height的定义</h3><ul><li>行高, 两行文字基线之间的距离</li><li>一行文字也是有行高的(两行的定义已经决定了一行的表现)</li></ul><h3 id="line-height与行内框盒子模型"><a href="#line-height与行内框盒子模型" class="headerlink" title="line-height与行内框盒子模型"></a>line-height与行内框盒子模型</h3><ul><li>所有内联元素的样式表现都与行内框盒子模型有关!例如浮动的图文环绕效果</li><li>“内容区域”，是一种环绕文字看不见的盒子。 “内容区域”的大小与font-size大小相关</li><li>“内联盒子”，”内联盒子”不会让内容成块显示，而是排成一行。如果外部含inline水平标签(span, a, em等),则属于”内联盒子”。如果是个光秃秃的文字，则属于”匿名内联盒子”</li><li>“行框盒子”,每一行就是一个”行框盒子”，每个”行框盒子”又是由一个个”内联盒子组成”</li><li>p标签所在的”包含盒子”, 此盒子由一行行的”行框盒子”组成</li><li>没有定高的盒模型并不是由文字撑开, 是由行高决定</li><li>行高由于其继承性，影响无处不在，即使单行文本也比例外</li><li>行高只是幕后黑手，高度的表现不是行高，而是内容区域和行间距</li><li>内容区域高度 + 行间距 = 行高</li><li>内容区域高度至于字号以及字体有关，与行高没有任何关系</li><li>行高决定内联盒子高度；行间距墙头草，可大可小(甚至负值),保证高度正好等同于行高</li><li>多行文本的高度就是单行文本高度累加</li><li>line-height: normal(默认属性值)</li><li>行高不会影响图片的占据的高度</li><li>隐匿的文本节点</li></ul><h3 id="消除图片底部间隙的方法"><a href="#消除图片底部间隙的方法" class="headerlink" title="消除图片底部间隙的方法"></a>消除图片底部间隙的方法</h3><ul><li>图片块状化-无基线对齐</li><li>图片底线对齐img{vertical-align: bottom}</li><li>行高足够小-基线位置上移.box{line-height: 0;}</li></ul><h3 id="line-height的实际应用"><a href="#line-height的实际应用" class="headerlink" title="line-height的实际应用"></a>line-height的实际应用</h3><p>大小不固定的图片,多行文字垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">300px</span>; </span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多行文本水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">250px</span>; </span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-class">.text</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block; </span><br><span class="line"><span class="attribute">line-height</span>: normal; </span><br><span class="line"><span class="attribute">text-align</span>: left; </span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><h3 id="padding的特性"><a href="#padding的特性" class="headerlink" title="padding的特性"></a>padding的特性</h3><ul><li>padding不支持任何形式的负值</li><li>padding百分比均是相对于宽度计算的</li></ul><h3 id="padding对于block水平元素的影响"><a href="#padding对于block水平元素的影响" class="headerlink" title="padding对于block水平元素的影响"></a>padding对于block水平元素的影响</h3><ul><li>padding值暴走，一定影响尺寸</li><li>width非auto, padding影响尺寸</li><li>width为auto或box-sizng为border-box, 同时padding值没有暴走，不影响尺寸</li></ul><h3 id="padding对inline水平元素的影响"><a href="#padding对inline水平元素的影响" class="headerlink" title="padding对inline水平元素的影响"></a>padding对inline水平元素的影响</h3><ul><li>水平padding影响尺寸, 垂直padding不影响尺寸，但是会影响背景色(占据空间)</li><li>可以用来实现高度可控的分隔符</li></ul><h3 id="inline水平元素的padding百分比值"><a href="#inline水平元素的padding百分比值" class="headerlink" title="inline水平元素的padding百分比值"></a>inline水平元素的padding百分比值</h3><ul><li>相对于宽度计算</li><li>padding会断行</li><li>默认的高度宽度细节有差异</li><li>inline元素的垂直padding会让”幽灵空白节点”显现(造成padding宽高不等)</li></ul><h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><h3 id="border的特性"><a href="#border的特性" class="headerlink" title="border的特性"></a>border的特性</h3><ul><li>border-width不支持百分比(类似的outline, text-shadow, border-shadow)</li><li>border-style特性(solid(实线), dashed(虚线), dotted(点线, double(双线)))</li><li>不指定border-color时默认就是color(类似的text-shadow, border-shadow)</li></ul><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><h3 id="overflow的特性"><a href="#overflow的特性" class="headerlink" title="overflow的特性"></a>overflow的特性</h3><ul><li>属性(visible, hidden, scroll, auto, inherit)</li><li>如果overflow-y=overflow-x值相同, 则等同于overflow;</li><li>如果overflow-y=overflow-x值不同, 且其中一个属性的值被置为visible, 而另一个被赋予hidden, - scroll, auto,那么这个visible被重置为auto;</li><li>无论什么浏览器, 默认滚动条均默认来自html而不是body标签</li><li>浏览器默认IE8+html(overflow: auto)</li><li>overflow的padding-bottom缺失(除chrome其他都缺失)</li><li>overflow与BFC(块状化格式上下文)——(清除浮动, 自适应布局等)</li></ul><h3 id="触发BFC-overflow-auto-hidden-scroll-———-页面结界-内部元素再怎么也不影响外部"><a href="#触发BFC-overflow-auto-hidden-scroll-———-页面结界-内部元素再怎么也不影响外部" class="headerlink" title="触发BFC(overflow: auto, hidden, scroll)———(页面结界, 内部元素再怎么也不影响外部)"></a>触发BFC(overflow: auto, hidden, scroll)———(页面结界, 内部元素再怎么也不影响外部)</h3><ul><li>应用(清除浮动影响, 避免margin穿透问题, 两栏自适应布局)</li><li>overflow对绝对定位元素失效(避免失效:verflow元素自身为包含块(relative), overflow子元素为包含块)</li><li>resize属性,resize:both(水平垂直),resize:horizontal(只有水平拉), resize:vertical(只有垂直拉),(此声明要想起作用,overflow属性值不能是visible)</li><li>overflow与锚链接</li></ul><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><h3 id="vertical-align的特性"><a href="#vertical-align的特性" class="headerlink" title="vertical-align的特性"></a>vertical-align的特性</h3><ul><li>线类 baseline, top, middle, bottom</li><li>文本类 text-top, text-bottom</li><li>上标下标类 sub, super</li><li>数值百分比类(在baseline对齐基础上上下偏移对应数值大小)</li><li>20px,2em,20%(百分比是相对于Line-height计算的)</li><li>应用于Inline水平以及”table-cell”元素</li></ul><p>inline水平</p><ul><li>inline: img, span</li><li>inline-block: input, button</li></ul><p>table-cell</p><ul><li>table-cell: td(对自身起作用)</li><li>inline-block的基线是正常流中最后一个line box的基线，除非这个line box里面既没有Line boxes或者本身overflow属性的计算值而不是visible, 这种情况下基线是margin底边缘</li></ul><h3 id="线性类属性值"><a href="#线性类属性值" class="headerlink" title="线性类属性值"></a>线性类属性值</h3><p>bottom</p><ul><li>inline/inline-block元素： 元素底部和整行的底部对齐</li><li>table-cell元素: 单元格底padding边缘和表格行的底部对齐</li></ul><p>top</p><ul><li>inline/inline-block元素： 元素顶部和整行的顶部对齐</li><li>table-cell元素: 单元顶部padding边缘和表格行的顶部对齐</li></ul><p>middle</p><ul><li>inline/inline-block元素： 元素的垂直中心点和父元素的基线上1/2x_height处对齐对齐</li><li>table-cell元素: 单元格填充盒子相对于外面的表格行居中对齐</li></ul><p>文本类属性</p><ul><li>vertical-align: text-top;(盒子的顶部和父级content area的顶部对齐)</li><li>vertical-align: text-top;(盒子的底部和父级content area的底部对齐)</li></ul><p>上标, 下标</p><ul><li><sup> =&gt; vertical-align: sup;</sup></li><li><sub> =&gt; vertical-align: sub;</sub></li><li>vertical-align: sup(提高盒子的基线到父级合适的上标基线位置)</li><li>vertical-align: sub(降低盒子的基线到父级合适的下标基线位置)</li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h2 id="BFC-块格式化上下文"><a href="#BFC-块格式化上下文" class="headerlink" title="BFC(块格式化上下文)"></a>BFC(块格式化上下文)</h2><p>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><p>下列方式会创建块格式化上下文：</p><ul><li>根元素或包含根元素的元素</li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块元素（元素的 display 为 inline-block）</li><li>表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）</li><li>表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）</li><li>overflow 值不为 visible 的块元素</li><li>display 值为 flow-root 的元素</li><li>contain 值为 layout、content或 strict 的元素</li><li>弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li><li>网格元素（display为 grid 或 inline-grid 元素的直接子元素）</li><li>多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）</li><li>column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中</li></ul><p>块格式化上下文包含创建它的元素内部的所有内容.</p><p>块格式化上下文对浮动定位（参见 float）与清除浮动（参见 clear）都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;学习前端，了解一点CSS还是有必要的，就算是为了应对面试官，我觉得也需要去略作了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://qinyongli.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈浏览器缓存机制</title>
    <link href="http://qinyongli.cn/2019/03/17/%E6%B5%85%E8%B0%88%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://qinyongli.cn/2019/03/17/浅谈浏览器缓存机制/</id>
    <published>2019-03-17T15:26:44.000Z</published>
    <updated>2019-03-18T02:08:10.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。</p><a id="more"></a><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>通常浏览器缓存策略分为两种：强缓存和协商缓存。</p><p>几条关于缓存的规则：</p><ul><li>添加Expires或Cache-Control到报文头中</li><li>配置ETags</li><li>让Ajax可缓存</li></ul><p>通常来说，POST、DELETE、PUT这类行为性的请求操作一般不做任何缓存，大多数缓存只应用在GET请求中。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Script标签</title>
    <link href="http://qinyongli.cn/2019/03/15/Script%E6%A0%87%E7%AD%BE/"/>
    <id>http://qinyongli.cn/2019/03/15/Script标签/</id>
    <published>2019-03-15T07:08:04.000Z</published>
    <updated>2019-03-15T07:46:36.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>向HTML页面中插入JavaScript的主要方法，就是使用script元素。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>async：可选，表示应该立即下载脚本，但不应该妨碍页面中的其他操作。只对外部脚本文件有效。</li><li>charset：可选，表示通过src属性指定的代码的字符集，大多数浏览器会忽略它，一般不被人使用。</li><li>defer：可选，表示脚本可以延迟到文档完全解析和显示之后再执行。只对外部脚本文件有效。</li><li>src：可选，表示包含要执行代码的外部文件。</li><li>type：可选，表示编写代码使用的脚本语言的内容类型。</li></ul><h3 id="标签位置"><a href="#标签位置" class="headerlink" title="标签位置"></a>标签位置</h3><h4 id="header元素中"><a href="#header元素中" class="headerlink" title="header元素中"></a>header元素中</h4><p>header元素中包含所有的JavaScript文件，意味着必须等到全部JavaScript代码都被下载、解析和执行完成以后，才能开始呈现页面的内容(浏览器在遇到body标签时才开始呈现内容)。对于那些需要很多JavaScript代码的页面来说，这无疑会导致浏览器在呈现页面时出现明显的延迟，而延迟期间的浏览器窗口中将是一片空白。</p><p>一般避免的办法是把全部JavaScript引用放到在body元素内容的后面，这样子，在解析包含的JavaScript代码之前，页面的内容将完全呈现在浏览器中。</p><h3 id="延迟脚本-defer属性"><a href="#延迟脚本-defer属性" class="headerlink" title="延迟脚本(defer属性)"></a>延迟脚本(defer属性)</h3><p>defer这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都被解析完毕后再运行。因此，在script元素中设置defer属性，相当于告诉浏览器立即下载，延迟执行。</p><p>HTML5规范要求脚本按照他们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于DOMContentLoaded事件执行。在现实当中，延迟脚本并不一定会按照顺序执行，也不一定在DOMContentLoaded事件触发前执行，因此最好只包含一个延迟脚本。</p><h3 id="异步脚本-async属性"><a href="#异步脚本-async属性" class="headerlink" title="异步脚本(async属性)"></a>异步脚本(async属性)</h3><p>async这个属性与defer属性类似，都用于改变处理脚本的行为。同样与defer类似，async只适用于外部脚本，并告诉浏览器立即下载文件。但与defer不同的是，标记为async的脚本并不保证按照它们的先后顺序执行。</p><p>使用async属性，如果引入两个脚本文件，第二个脚本文件可能会在第一个脚本文件之前执行。因此，确保两者之间互不依赖非常重要。指定async属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。为此，建议异步脚本不要在加载期间修改DOM。</p><p>异步脚本一定会在页面的load事件前执行，但可能会在DOMContentLoaded事件触发之前或之后执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;向HTML页面中插入JavaScript的主要方法，就是使用script元素。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript的闭包</title>
    <link href="http://qinyongli.cn/2019/03/08/%E6%B5%85%E8%B0%88JavaScript%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <id>http://qinyongli.cn/2019/03/08/浅谈JavaScript的闭包/</id>
    <published>2019-03-08T06:12:04.000Z</published>
    <updated>2019-03-08T08:01:45.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>在JS中闭包是一个很重要的概念，很多地方都运用到了闭包，所以有必要深入理解一下闭包。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCompareFn</span> (<span class="params">propertyName</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">object1, object2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> value1 = object1[propertyName];</span><br><span class="line"><span class="keyword">var</span> value2 = object2[propertyName];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部函数访问了外部函数的变量propertyName，之所以还能够访问这个变量，是因为内部函数的作用域链中包含外部函数的作用域链。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;在JS中闭包是一个很重要的概念，很多地方都运用到了闭包，所以有必要深入理解一下闭包。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的变量声明</title>
    <link href="http://qinyongli.cn/2019/03/07/JavaScript%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/"/>
    <id>http://qinyongli.cn/2019/03/07/JavaScript的变量声明/</id>
    <published>2019-03-07T04:53:09.000Z</published>
    <updated>2019-03-08T12:34:18.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>在ES6出世以前，在JavaScript中声明变量的方式只有var，在ES6出世以后，新增了let、const两种变量声明的方式。</p><a id="more"></a><h2 id="ES5的var声明"><a href="#ES5的var声明" class="headerlink" title="ES5的var声明"></a>ES5的var声明</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ECMAScript的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message</span><br></pre></td></tr></table></figure><p>这行代码定义了一个名为message的变量，该变量可以用来保存任何值（像这样未经过初始化的变量，会保存一个特殊的值–undefined）</p><p>直接初始化变量，在定义的同时直接给予赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">'hi'</span></span><br></pre></td></tr></table></figure><p>用var操作符定义的变量将成为定义该变量的作用域中的局部变量。也就是说，如果在函数中使用var定义一个变量，那么这个变量在函数退出后就会被销毁，例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">'hi'</span>;<span class="comment">//局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message);<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p>给一个未定义声明过的变量赋值时，会创建一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">message = <span class="string">"hi"</span>;<span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message);<span class="comment">// 'hi'</span></span><br></pre></td></tr></table></figure><p>给未经声明的变量赋值在严格模式下会导致抛出ReferenceError错误</p><h3 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h3><p>JavaScript从来不会告诉你是否多次声明了同一变量；遇到这种情况，它只会对后续的声明视而不见(不过，它会执行后续声明中的变量初始化，如果声明不初始化如果值不变)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>var声明变量存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="全局对象的属性"><a href="#全局对象的属性" class="headerlink" title="全局对象的属性"></a>全局对象的属性</h3><p>所有在全局作用域中声明的变量、函数都会变成global(浏览器环境中是window)对象的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayAge</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(global.age);<span class="comment">//29</span></span><br><span class="line">sayAge();<span class="comment">//29</span></span><br><span class="line"><span class="built_in">window</span>.sayAge();<span class="comment">//29</span></span><br></pre></td></tr></table></figure><p>全局变量不能通过delete操作符删除，而直接在global对象上的定义的属性可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">global.color = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> global.age;<span class="comment">//return false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> global.color;<span class="comment">//return true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(global.age);<span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(global.color);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>尝试访问未声明的变量会抛出错误，但是通过查询global对象，可以知道某个可能未声明的变量是否存在。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newValue = oldValue;<span class="comment">//这里会抛出错误，因为oldValue未定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newValue = <span class="built_in">window</span>.oldValue;<span class="comment">//这里不会抛出错误，因为这是一次属性查询</span></span><br></pre></td></tr></table></figure><h2 id="ES6的let、const声明"><a href="#ES6的let、const声明" class="headerlink" title="ES6的let、const声明"></a>ES6的let、const声明</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>let声明的变量只在let命令所在的代码块内有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a<span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line">b<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>for循坏的计数器，就很适合使用let命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure><p>以上代码中的计数器i，只在for循环体内有效。</p><p>一下的代码如果使用var，最后将输出10。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>]();<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>上面的代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i值。</p><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”(binding)这个区域，不再受外部的影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">tmp = <span class="string">'abc'</span>;<span class="comment">//ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p><p>ES6明确规定，如果区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。只要在声明之前使用这些变量，就会报错。</p><h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><p>let 不允许在相同作用域内声明同一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能在函数内部重新声明参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> arg;<span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arg;<span class="comment">//不报错</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><p>const用来声明常量。一旦声明，其值就不能改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>; </span><br><span class="line">PI <span class="comment">//3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span> <span class="comment">//TypeError: "PI" isread-only</span></span><br></pre></td></tr></table></figure><p>const声明的常量不得改变值。这意味着，const一旦声明常量，就必须立即初始化，不能留到以后赋值。</p><h4 id="全局对象的属性-1"><a href="#全局对象的属性-1" class="headerlink" title="全局对象的属性"></a>全局对象的属性</h4><p>全局对象是最顶层的对象，在浏览器环境指的是window对象，在Node.js中指的是global对象。在ES5中，全局对象的属性和全局变量是等价的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">1</span>;</span><br><span class="line">a <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>这种规定被视为JavaScript语言的一大问题，因为很容易不知不觉就创建了全局变量。ES6位了改变这一点，一方面规定，var命令和function命令声明的全局变量依旧是全局对象的属性；另一方面规定，let命令、const命令和class命令声明的全局变量不属于全部对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;在ES6出世以前，在JavaScript中声明变量的方式只有var，在ES6出世以后，新增了let、const两种变量声明的方式。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>写一个Promise</title>
    <link href="http://qinyongli.cn/2019/03/05/%E5%86%99%E4%B8%80%E4%B8%AAPromise/"/>
    <id>http://qinyongli.cn/2019/03/05/写一个Promise/</id>
    <published>2019-03-05T11:51:41.000Z</published>
    <updated>2019-03-17T15:25:03.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>JS和Node.js通过事件驱动、事件循环实现了异步编程，提高了资源利用率，提高了性能，但也因此带来了异步编程的难点。为了解决异步编程带来的难点，社区出了好几个解决方案，事件发布/订阅模式、Promise/Deferred模式、流程控制库，最终Promise成为了ES6中一个解决异步编程难点的API，再配合ES2017中Async/Await真正解决异步编程的难点。</p><a id="more"></a><h2 id="介绍Promise"><a href="#介绍Promise" class="headerlink" title="介绍Promise"></a>介绍Promise</h2><h3 id="Promise的含义"><a href="#Promise的含义" class="headerlink" title="Promise的含义"></a>Promise的含义</h3><p>所谓Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可供进一步处理。</p><p>Promise有两个特点:</p><ol><li>对象的状态不受外界影响。Promise对象代表一个异步操作，有3种状态：Pending(进行中)，Resolved(已完成，又称Fuilfilled)和Rejected(已失败)。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li><li>一旦状态改变就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变只有两种可能，从Pending变为Resolved和从Pending变为Rejected。只要其中之一发生，状态就凝固了，不会再变，会一直保持这个结果。</li></ol><h3 id="Promise基本用法"><a href="#Promise基本用法" class="headerlink" title="Promise基本用法"></a>Promise基本用法</h3><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">resolve(value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="comment">//success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="comment">//failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="实现Promise"><a href="#实现Promise" class="headerlink" title="实现Promise"></a>实现Promise</h2><h3 id="基于事件发布-订阅实现"><a href="#基于事件发布-订阅实现" class="headerlink" title="基于事件发布/订阅实现"></a>基于事件发布/订阅实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> (handler) &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'pendding'</span>;</span><br><span class="line"><span class="keyword">this</span>.resolve = <span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.reject = <span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> handler == <span class="string">'function'</span>) &#123;</span><br><span class="line">handler(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resolve (obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state == <span class="string">'pendding'</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'resolved'</span>;</span><br><span class="line"><span class="keyword">this</span>.emit(<span class="string">'resolved'</span>, obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reject (err) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state == <span class="string">'pendding'</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</span><br><span class="line"><span class="keyword">this</span>.emit(<span class="string">'rejected'</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">then (resolvedHandler, rejectedHandler) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> resolvedHandler == <span class="string">'function'</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.once(<span class="string">'resolved'</span>, resolvedHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> rejectedHandler == <span class="string">'function'</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.once(<span class="string">'rejected'</span>, rejectedHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (rejectedHandler) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> rejectedHandler == <span class="string">'function'</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.once(<span class="string">'rejected'</span>, rejectedHandler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现链式调用"><a href="#实现链式调用" class="headerlink" title="实现链式调用"></a>实现链式调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三种状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">"pending"</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">"resolved"</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">"rejected"</span>;</span><br><span class="line"><span class="comment">// promise 接收一个函数参数，该函数会立即执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  _this.currentState = PENDING;</span><br><span class="line">  _this.value = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 用于保存 then 中的回调，只有当 promise</span></span><br><span class="line">  <span class="comment">// 状态为 pending 时才会缓存，并且每个实例至多缓存一个</span></span><br><span class="line">  _this.resolvedCallbacks = [];</span><br><span class="line">  _this.rejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  _this.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">      <span class="comment">// 如果 value 是个 Promise，递归执行</span></span><br><span class="line">      <span class="keyword">return</span> value.then(_this.resolve, _this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步执行，保证执行顺序</span></span><br><span class="line">      <span class="keyword">if</span> (_this.currentState === PENDING) &#123;</span><br><span class="line">        _this.currentState = RESOLVED;</span><br><span class="line">        _this.value = value;</span><br><span class="line">        _this.resolvedCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _this.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步执行，保证执行顺序</span></span><br><span class="line">      <span class="keyword">if</span> (_this.currentState === PENDING) &#123;</span><br><span class="line">        _this.currentState = REJECTED;</span><br><span class="line">        _this.value = reason;</span><br><span class="line">        _this.rejectedCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用于解决以下问题</span></span><br><span class="line">  <span class="comment">// new Promise(() =&gt; throw Error('error))</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(_this.resolve, _this.reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    _this.reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 规范 2.2.7，then 必须返回一个新的 promise</span></span><br><span class="line">  <span class="keyword">var</span> promise2;</span><br><span class="line">  <span class="comment">// 规范 2.2.onResolved 和 onRejected 都为可选参数</span></span><br><span class="line">  <span class="comment">// 如果类型不是函数需要忽略，同时也实现了透传</span></span><br><span class="line">  <span class="comment">// Promise.resolve(4).then().then((value) =&gt; console.log(value))</span></span><br><span class="line">  onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">'function'</span> ? onResolved : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> <span class="keyword">throw</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.currentState === RESOLVED) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 规范 2.2.4，保证 onFulfilled，onRjected 异步执行</span></span><br><span class="line">      <span class="comment">// 所以用了 setTimeout 包裹下</span></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onResolved(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">          reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.currentState === REJECTED) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 异步执行onRejected</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onRejected(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">          reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.currentState === PENDING) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      self.resolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 考虑到可能会有报错，所以使用 try/catch 包裹</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onResolved(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      self.rejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onRejected(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 规范 2.3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolutionProcedure</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 规范 2.3.1，x 不能和 promise2 相同，避免循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Error"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 规范 2.3.2</span></span><br><span class="line">  <span class="comment">// 如果 x 为 Promise，状态为 pending 需要继续等待否则执行</span></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.currentState === PENDING) &#123;</span><br><span class="line">      x.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 再次调用该函数是为了确认 x resolve 的</span></span><br><span class="line">        <span class="comment">// 参数是什么类型，如果是基本类型就再次 resolve</span></span><br><span class="line">        <span class="comment">// 把值传给下个 then</span></span><br><span class="line">        resolutionProcedure(promise2, value, resolve, reject);</span><br><span class="line">      &#125;, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x.then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 规范 2.3.3.3.3</span></span><br><span class="line">  <span class="comment">// reject 或者 resolve 其中一个执行过得话，忽略其他的</span></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 规范 2.3.3，判断 x 是否为对象或者函数</span></span><br><span class="line">  <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">"object"</span> || <span class="keyword">typeof</span> x === <span class="string">"function"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 规范 2.3.3.2，如果不能取出 then，就 reject</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 规范 2.3.3.1</span></span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="comment">// 如果 then 是函数，调用 x.then</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="comment">// 规范 2.3.3.3</span></span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          y =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 规范 2.3.3.3.1</span></span><br><span class="line">            resolutionProcedure(promise2, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          e =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 规范 2.3.3.4</span></span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 规范 2.3.4，x 为基本类型</span></span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;JS和Node.js通过事件驱动、事件循环实现了异步编程，提高了资源利用率，提高了性能，但也因此带来了异步编程的难点。为了解决异步编程带来的难点，社区出了好几个解决方案，事件发布/订阅模式、Promise/Deferred模式、流程控制库，最终Promise成为了ES6中一个解决异步编程难点的API，再配合ES2017中Async/Await真正解决异步编程的难点。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML5 通讯API</title>
    <link href="http://qinyongli.cn/2019/03/04/HTML5-%E9%80%9A%E8%AE%AFAPI/"/>
    <id>http://qinyongli.cn/2019/03/04/HTML5-通讯API/</id>
    <published>2019-03-04T12:58:26.000Z</published>
    <updated>2019-03-04T14:00:15.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>HTML5之前，前后端之间的数据交互比较单一，只能通过ajax技术实现两端之间的数据交互，而且只能由客户端向服务器端发送请求进而携带着数据发往服务器端，然后等待服务器端响应，响应中携带着客户端需要的服务器端数据，而服务器端无法主动向客户端主动发送数据。HTML5现世后，涌现出了两个新的API, WebSocket、SSE，实现了服务器端主动向客户端发往数据。</p><a id="more"></a><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="客户端实现方式"><a href="#客户端实现方式" class="headerlink" title="客户端实现方式"></a>客户端实现方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webSocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080"</span>); <span class="comment">//与服务器建立连接</span></span><br><span class="line"><span class="comment">//url必须以"ws"或"wss"开头(加密通讯时)文字开头</span></span><br><span class="line"></span><br><span class="line">webSocket.send(data);<span class="comment">//向服务器发送数据</span></span><br><span class="line"><span class="comment">//data可以是JSON对象转换为文本数据, 或着blob对象或arraybuffer对像</span></span><br><span class="line"></span><br><span class="line">webSocket.onmassage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> massage = e.data;</span><br><span class="line">&#125;;<span class="comment">//监听服务器端发来的数据</span></span><br><span class="line"></span><br><span class="line">websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;<span class="comment">//监听open事件，进而判断是否连接成功</span></span><br><span class="line"></span><br><span class="line">webSocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;<span class="comment">//监听close事件，进而判断连接是否关闭</span></span><br><span class="line"></span><br><span class="line">webSocket.close();切断连接</span><br><span class="line"></span><br><span class="line">websocket.binaryType = arraybuffer || blob;<span class="comment">//设置接受数据类型</span></span><br></pre></td></tr></table></figure><h3 id="服务器端实现方式"><a href="#服务器端实现方式" class="headerlink" title="服务器端实现方式"></a>服务器端实现方式</h3><p>使用Node.js的ws、 socket.io模块来实现</p><h4 id="WS实现"><a href="#WS实现" class="headerlink" title="WS实现"></a>WS实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Broadcast to all.(向所有连接的socket发送数据)</span></span><br><span class="line">wss.broadcast = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">     wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">              client.send(data);</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, (ws) =&gt; &#123;</span><br><span class="line">    ws.on(<span class="string">'message'</span>, (data) =&gt; &#123;</span><br><span class="line">        <span class="comment">// Broadcast to everyone else.(像其他人广播数据)</span></span><br><span class="line">        wss.clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">                client.send(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结合Express一起使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app);</span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; server &#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(&#123; <span class="attr">msg</span>: <span class="string">"hello"</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, (ws) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> location = url.parse(ws.upgradeReq.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// You might use location.query.access_token to authenticate or share sessions</span></span><br><span class="line">  <span class="comment">// or ws.upgradeReq.headers.cookie</span></span><br><span class="line">  ws.on(<span class="string">'message'</span>, (message) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received: %s'</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line">  ws.send(<span class="string">'something'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on %d'</span>, server.address().port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="SOCKET-IO实现方式"><a href="#SOCKET-IO实现方式" class="headerlink" title="SOCKET.IO实现方式"></a>SOCKET.IO实现方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端建立socket</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">"socket.io"</span>);<span class="comment">//服务器引入socket.io</span></span><br><span class="line"><span class="keyword">const</span> socket = io.listen(server);<span class="comment">//server为一个http服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端建立socket</span></span><br><span class="line">&lt;script src=<span class="string">"/socket.io/socket.io.js"</span>&gt;&lt;/script&gt;<span class="comment">//客户端引入socket.io</span></span><br><span class="line"><span class="keyword">const</span> socket = io();</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共API</span></span><br><span class="line">socket.on(<span class="string">'connection'</span>, callback);<span class="comment">//监听连接事件</span></span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'disconnection'</span>, callback);<span class="comment">//监听断开连接事件</span></span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">"message"</span>, callback);<span class="comment">//监听接受消息事件</span></span><br><span class="line"></span><br><span class="line">socket.send();<span class="comment">//向对端发送数据</span></span><br><span class="line"></span><br><span class="line">socket.emit(event, data, [callback])；<span class="comment">//发布事件，callback由对方进行调用及形参的传进</span></span><br><span class="line"></span><br><span class="line">socket.on(event, <span class="function"><span class="keyword">function</span> (<span class="params">data, fn</span>) </span>&#123;&#125;);<span class="comment">//事件监听</span></span><br><span class="line"></span><br><span class="line">socket.once();<span class="comment">//监听事件，只触发一次</span></span><br><span class="line"></span><br><span class="line">保存数据:</span><br><span class="line">socket.set(name, value, [callback]);</span><br><span class="line">socket.get(name, callback)</span><br><span class="line"><span class="comment">//callback: (err, docs) =&gt; &#123;&#125;;</span></span><br><span class="line"></span><br><span class="line">广播消息:</span><br><span class="line">io.sockets.</span><br><span class="line">socket.broadcast.</span><br><span class="line"></span><br><span class="line">使用命名空间:</span><br><span class="line">io.of(namespace)</span><br><span class="line"><span class="keyword">const</span> chat = io.of(<span class="string">"/chat"</span>);</span><br><span class="line">chat.on(<span class="string">"connection"</span>, callback);<span class="comment">//监听连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chat = io.connect(<span class="string">"http://localhost/chat"</span>);<span class="comment">//建立连接</span></span><br></pre></td></tr></table></figure><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p>是一种从服务器端发往客户端的单向通信机制，由服务器端发送一些事件, 再由客户端接收这些事件</p><h3 id="客户端实现方式-1"><a href="#客户端实现方式-1" class="headerlink" title="客户端实现方式"></a>客户端实现方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="keyword">new</span> EventSource(url);</span><br><span class="line">source.onmessage = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;e.data&#125;;</span><br><span class="line">source.onopen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">source.onerror = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">source.close();</span><br></pre></td></tr></table></figure><h3 id="服务器端实现方式-1"><a href="#服务器端实现方式-1" class="headerlink" title="服务器端实现方式"></a>服务器端实现方式</h3><p>服务器端发送的数据只能以一个字符串的形式发送，对象必须转为JSON字符串进行发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.writeHeader(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/event-stream"</span>&#125;, <span class="string">"Cache-Control"</span>: <span class="string">"no-cache"</span>); <span class="comment">//必须指定浏览器不缓存服务器发送的数据</span></span><br></pre></td></tr></table></figure><p>发送事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;id: requests \n\n&quot;</span><br><span class="line">echo &quot;data: 数据 \n\n&quot;</span><br><span class="line">echo &quot;retry: 5000\n\n&quot;</span><br></pre></td></tr></table></figure><p>//每行数据之前必须书写”data: “前缀，同时在行结尾需书写”\n\n”换行标志<br>//指定客户端每隔多长时间与服务器建立一次连接并获取事件流，不指定由浏览器决定</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;HTML5之前，前后端之间的数据交互比较单一，只能通过ajax技术实现两端之间的数据交互，而且只能由客户端向服务器端发送请求进而携带着数据发往服务器端，然后等待服务器端响应，响应中携带着客户端需要的服务器端数据，而服务器端无法主动向客户端主动发送数据。HTML5现世后，涌现出了两个新的API, WebSocket、SSE，实现了服务器端主动向客户端发往数据。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ECMAScript 面向对象</title>
    <link href="http://qinyongli.cn/2019/03/04/ECMAScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://qinyongli.cn/2019/03/04/ECMAScript-面向对象/</id>
    <published>2019-03-04T07:41:54.000Z</published>
    <updated>2019-03-16T04:42:56.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>很多编程语言都有面向对象的编程，ECMAScript同样也是如此。ECMAScript语言的传统方法是通过构造函数定义并生成新对象，自从ES6出来之后，ES6提供了更接近传统语言的写法，引入了Class(类)这个概念作为对象的模板。</p><a id="more"></a><h2 id="ES5的面相对象"><a href="#ES5的面相对象" class="headerlink" title="ES5的面相对象"></a>ES5的面相对象</h2><h3 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h3><h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><p>ECMAScript中有两种属性：数据属性和访问器属性。</p><h5 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h5><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有4个描述其行为的特性。</p><ul><li>[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。对象字面量定义这个特性默认值为true</li><li>[[Enumerable]]：表示能否通过for-in循环返回属性。对象字面量定义这个特性默认值为true</li><li>[[Writable]]：表示能否修改属性的值。对象字面量定义这个特性默认值为true</li><li>[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把这个新值保存在这个位置。这个特性的默认值为undefined</li></ul><p>对于对象字面量，[[Configurable]]、[[Enumerable]]、[[Writable]]特性都被设置为true，而[[Value]]特性被设置为指定的值。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name: <span class="string">"sceley"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要修改属性默认的特性，必须使用ES5的Object.defineProperty()方法。这个方法接收三参数：属性所在的对象、属性的名字和一个描述符对象。其中描述符对象的属性必须是：[[Configurable]]、[[Enumerable]]、[[Writable]]、[[Value]]。设置其中的一个或多个值，可以修改对象的特性值。</p><h5 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h5><p>访问器属性不包含数据值；它们包含一对儿getter和setter函数(不过，这两个函数都不是必需的)。要读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定如何处理函数。访问器属性有如下4个属性。</p><ul><li>[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。对象字面量定义这个特性默认值为true</li><li>[[Enumerable]]：表示能否通过for-in循环返回属性。对象字面量定义这个特性默认值为true</li><li>[[Getter]]：在读取属性时调用的函数。默认值为undefined。</li><li>[[setter]]：在写入属性时调用的函数。默认值为undefined。</li></ul><p>访问器不能直接定义，必须使用Object.defineProperty()来定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">__year: <span class="number">2004</span>,</span><br><span class="line">edition: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">'year'</span>, &#123;</span><br><span class="line"><span class="keyword">get</span>: function () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>: function (value) &#123;</span><br><span class="line"><span class="keyword">this</span>._year = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>工厂模式是软件工程领域一种广为人知的设计模式，用函数来封装以特定接口创建对象的细节。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.name = name;</span><br><span class="line">o.age = age;</span><br><span class="line">o.job = job;</span><br><span class="line">o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题。</p><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><p>ES中的构造函数可以用来创建指定类型的对象。像Object和Array这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line"><span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'sceley'</span>, <span class="number">20</span>, <span class="string">"Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'kitty'</span>, <span class="number">20</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure><p>以这种方式调用构造函数实际上会经历以下4个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象(因此this就指向了这个新对象)</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回对象</li></ol><p>构造函数的缺点就是每个方法都要在每个实例上重新创建一遍。</p><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>我们创建的每个函数都有一个prototype(原型)属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"sceley"</span>;</span><br><span class="line">Person.prototype.name = <span class="number">22</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line"><span class="keyword">this</span>.friends = [<span class="string">'sceley'</span>, <span class="string">'kitty'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line"><span class="keyword">constructor</span>: Person,</span><br><span class="line">sayName: function () &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种构造函数与原型混成的模式，是目前认同度高的一种创建自定义类型的方法。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Biology</span> (<span class="params">name, age, category</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.category = category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Biology.prototype.sayCategory = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Biology.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Biology.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name, age, feed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.feed = feed;</span><br><span class="line">    Biology.call(<span class="keyword">this</span>, name, age, <span class="string">'animal'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype = <span class="keyword">new</span> Biology();</span><br><span class="line">Animal.prototype.constructor = Animal;</span><br><span class="line">Animal.prototype.doFeed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.feed &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.feed = <span class="keyword">this</span>.feed - <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`喂食成功, 饲料剩余<span class="subst">$&#123;<span class="keyword">this</span>.feed&#125;</span>斤`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'喂食失败, 饲料不足'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Plant</span> (<span class="params">name, age, water</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.water = water;</span><br><span class="line">    Biology.call(<span class="keyword">this</span>, name, age, <span class="string">'plant'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plant.prototype = <span class="keyword">new</span> Biology();</span><br><span class="line">Plant.prototype.constructor = Plant;</span><br><span class="line">Plant.prototype.doWater = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.water &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.water = <span class="keyword">this</span>.water - <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`浇水成功, 水剩余<span class="subst">$&#123;<span class="keyword">this</span>.water&#125;</span>桶`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'浇水失败, 水不足'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺陷：组合继承最大的问题就是无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型的时候，另一次是在子类型构造函数内部。子类型最终会包含超类型对象的全部实例属性，但我们不得不在调用子类型构造函数时重写这些属性。</p><p>tips:</p><blockquote><p>使用原型模式来让所有对象实例共享它所包含的属性和方法。</p></blockquote><blockquote><p>ES5中实现子类继承父类是使用了原型链作为主要方法，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p></blockquote><blockquote><p>所有引用类型默认都继承了Object，而这个继承也是通过原型链实现的。</p></blockquote><blockquote><p>通过原型来实现继承时，原型实际上会变成另一个类型的实例，解决的方法是借用构造函数技术，即在子类构造函数的内部调用超类型构造函数。</p></blockquote><blockquote><p>原型链的问题是对象实例共享所有继承的属性和方法，因此不适宜单独使用。</p></blockquote><blockquote><p>组合继承，这种模式使用原型链继承共享的属性和方法，而通过借用构造函数继承实例继承属性。</p></blockquote><h4 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h4><p>所谓的寄生组合继承，即通过借用构造函数来继承属性，通过原型链的混成形势来继承方法。其背后的基本思想是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> prototype = <span class="built_in">Object</span>(superType.prototype);</span><br><span class="line">prototype.constructor = subType;</span><br><span class="line">subType.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototy.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p><h2 id="ES6类的面向对象"><a href="#ES6类的面向对象" class="headerlink" title="ES6类的面向对象"></a>ES6类的面向对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Biology</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> (name, age, category) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.category = category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayAge () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayCategory () &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.category;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plant</span> <span class="keyword">extends</span> <span class="title">Biology</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> (name, age, water) &#123;</span><br><span class="line"><span class="keyword">super</span>(name, age, <span class="string">'tree'</span>);</span><br><span class="line"><span class="keyword">this</span>.water = water;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doWater () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.water &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.water = <span class="keyword">this</span>.water - <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`浇水成功, 水剩余<span class="subst">$&#123;<span class="keyword">this</span>.water&#125;</span>桶`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'浇水失败, 水不足'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">Biology</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> (name, age, feed) &#123;</span><br><span class="line"><span class="keyword">super</span>(name, age, <span class="string">'animal'</span>);</span><br><span class="line"><span class="keyword">this</span>.feed = feed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doFeed () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.feed &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.feed = <span class="keyword">this</span>.feed - <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`喂食成功, 饲料剩余<span class="subst">$&#123;<span class="keyword">this</span>.feed&#125;</span>斤`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'喂食失败, 饲料不足'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;很多编程语言都有面向对象的编程，ECMAScript同样也是如此。ECMAScript语言的传统方法是通过构造函数定义并生成新对象，自从ES6出来之后，ES6提供了更接近传统语言的写法，引入了Class(类)这个概念作为对象的模板。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言中的多进程</title>
    <link href="http://qinyongli.cn/2018/06/04/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://qinyongli.cn/2018/06/04/C语言中的多进程/</id>
    <published>2018-06-04T02:03:26.000Z</published>
    <updated>2018-06-04T08:50:41.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>为了充分利用计算机中的多核CPU，计算机提供了两个接口使用多核CPU，两个接口分别是：多进程、多线程。本编文章将介绍多进程编程，利用多核CPU。</p><a id="more"></a><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><blockquote><p>核的个数与可同时运行的进程数相同。相反，若进程数超过核数，进程将分时使用CPU资源。但因为CPU运行速度极快，我们会感到所有进程同时运行。当然多核越多，这种感觉也明显。</p></blockquote><h3 id="fork函数创建多进程"><a href="#fork函数创建多进程" class="headerlink" title="fork函数创建多进程"></a>fork函数创建多进程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> fork(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p>fork函数将创建调用的进程副本。两个进程都将执行fork调用后的语句，子进程将复制父进程相同的内存空间，之后的程序流要根据fork函数的返回值加以区分。</p><ul><li>父进程：fork函数返回子进程ID</li><li>子进程：fork函数返回0</li></ul><p><img src="/img/fork函数创建进程.png" alt></p><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gval = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">int</span> lval = <span class="number">20</span>;</span><br><span class="line">gval++, lval += <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;<span class="comment">//child pro</span></span><br><span class="line">gval += <span class="number">2</span>, lval += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//parent pro</span></span><br><span class="line">gval -= <span class="number">2</span>, lval -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child Proc: [%d, %d] \n"</span>, gval, lval);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Parent Proc: [%d, %d] \n"</span>, gval, lval);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/fork.png" alt></p><h3 id="进程与僵尸进程"><a href="#进程与僵尸进程" class="headerlink" title="进程与僵尸进程"></a>进程与僵尸进程</h3><h4 id="僵尸进程的产生"><a href="#僵尸进程的产生" class="headerlink" title="僵尸进程的产生"></a>僵尸进程的产生</h4><p>文件操作中，关闭文件和打开文件同等重要。同样进程的创建和进程的销毁同等重要。如果未认真对待进程销毁，它们将变成僵尸进程困扰各位。</p><p>进程完成工作后（执行完main函数中的程序后）应当销毁，但有时这些进程将变成僵尸进程，占用系统中的重要资源。</p><p>子进程的终止方式：</p><ul><li>传递参数并调用exit函数</li><li>main函数中执行return语句并返回值</li></ul><p>向exit函数传递的参数值和main函数的return语句返回的值都会传递给操作系统。而操作系统并不会销毁子进程，直到把这些值传递给产生该子进程的父进程。</p><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; Child Pro</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hi, I am a child process \n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child Process ID: %d \n"</span>, pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"End child process \n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"End parent process \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="销毁僵尸进程"><a href="#销毁僵尸进程" class="headerlink" title="销毁僵尸进程"></a>销毁僵尸进程</h4><p>为了销毁子进程，父进程应主动请求获取子进程的返回值。</p><h5 id="使用wait函数"><a href="#使用wait函数" class="headerlink" title="使用wait函数"></a>使用wait函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">pid <span class="title">wait</span><span class="params">(<span class="keyword">int</span> * statloc)</span></span>;</span><br><span class="line"><span class="comment">//成功时返回终止的子进程的ID，失败时返回-1</span></span><br></pre></td></tr></table></figure><p>调用此函数时如果已有子进程终止，那么子进程终止时传递的返回值（exit函数的参数值、main函数的return返回值）将保存到该函数的参数所指内存空间。</p><ul><li>WIFEXITED子进程正常终止时返回”真“ true</li><li>WEXITSTATUS返回子进程的返回值</li></ul><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#in</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child PID:%d \n"</span>, pid);</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">7</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">wait(&amp;status);</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child send one: %d \n"</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br><span class="line">wait(&amp;status)</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child send tow: %d \n"</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/wait.png" alt></p><p>调用wait函数时，如果没有已终止的子进程，那么程序将阻塞（Blocking）直到有子进程终止。</p><h5 id="使用waitpid函数"><a href="#使用waitpid函数" class="headerlink" title="使用waitpid函数"></a>使用waitpid函数</h5><p>wait函数会引起程序阻塞，而waitpid即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> waitpid(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> * statloc, <span class="keyword">int</span> options);</span><br><span class="line"></span><br><span class="line"><span class="comment">//成功时返回终止的子进程ID(或0)，失败时返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. pid 等待终止的目标子进程的ID， 若传递-1，则与wait函数相同，可以等待任意子进程终止</span></span><br><span class="line"><span class="comment">//2. ...</span></span><br><span class="line"><span class="comment">//3. 传递头文件sys/wait.h中声明的常量WNOHANG，即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出</span></span><br></pre></td></tr></table></figure><p>调用waitpid时程序不会阻塞。</p><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!waitpid(<span class="number">-1</span>, &amp;status, WNOHANG)) &#123;</span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sleep 3sec \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Child send %d \n"</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/waitpid.h" alt></p><h3 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h3><h4 id="signal函数"><a href="#signal函数" class="headerlink" title="signal函数"></a>signal函数</h4><p>信号注册函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*signal(<span class="keyword">int</span> signo, <span class="keyword">void</span> (*func)(<span class="keyword">int</span>)))(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数名: signal</span></span><br><span class="line"><span class="comment">//参数：int signo, void (*func)(int)</span></span><br><span class="line"><span class="comment">//返回类型：参数为int类型，返回void型函数指针</span></span><br></pre></td></tr></table></figure><p>发生第一个参数代表的情况时，调用第二个参数所指向的函数。</p><p>signal函数中注册的部分特殊情况和对应的常数。</p><ul><li>SIGALRM: 已通过调用alarm函数注册的时间</li><li>SIGINT: 输入CTRL+C</li><li>SIGCHLD: 子进程终止</li></ul><p>注册好信号后，发生注册信号时（注册的情况发生时），操作系统将调用该信号对应的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">alarm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds)</span></span>;</span><br></pre></td></tr></table></figure><p>如果调用该函数的同时向它传递一个正整型参数，相应时间后（以秒为单位）将产生SIGALRM信号。若向该函数传递0，则之前对SIGALRM信号的预约将取消。</p><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timeout</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sig == SIGALRM) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Time out!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">alarm(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keycontrol</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sig == SIGINT) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"CTRL+C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">signal(SIGALRM, timeout);</span><br><span class="line">signal(SIGINT, keycontrol);</span><br><span class="line">alarm(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"waiting ..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/signal.png" alt></p><blockquote><p>发生信号时将唤醒由于调用sleep函数而进入阻塞状态的进程</p></blockquote><h4 id="sigaction函数进行信号处理"><a href="#sigaction函数进行信号处理" class="headerlink" title="sigaction函数进行信号处理"></a>sigaction函数进行信号处理</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span> <span class="params">(<span class="keyword">int</span> signo, <span class="keyword">const</span> struct sigaction *act, struct sigaction *oldact)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;为了充分利用计算机中的多核CPU，计算机提供了两个接口使用多核CPU，两个接口分别是：多进程、多线程。本编文章将介绍多进程编程，利用多核CPU。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言多进程" scheme="http://qinyongli.cn/tags/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于c语言的socket编程</title>
    <link href="http://qinyongli.cn/2018/04/02/%E5%9F%BA%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84socket%E7%BC%96%E7%A8%8B/"/>
    <id>http://qinyongli.cn/2018/04/02/基于c语言的socket编程/</id>
    <published>2018-04-02T04:00:46.000Z</published>
    <updated>2018-04-04T06:20:21.893Z</updated>
    
    <content type="html"><![CDATA[<p>本编主要是自己在用c语言搭建socket编程的细节 </p><a id="more"></a><h2 id="tcp服务器端"><a href="#tcp服务器端" class="headerlink" title="tcp服务器端"></a>tcp服务器端</h2><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> serv_sock;</span><br><span class="line"><span class="keyword">int</span> clnt_sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clnt_addr</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> clnt_addr_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> message[] = <span class="string">"Hello World"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serv_sock=socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//创建套接字（成功返回文件描述符，失败返回-1）</span></span><br><span class="line"><span class="keyword">if</span> (serv_sock == <span class="number">-1</span>) </span><br><span class="line">error_handling(<span class="string">"socket() error"</span>);</span><br><span class="line"><span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">//每个字节都用0填充</span></span><br><span class="line">serv_addr.sin_family=AF_INET;<span class="comment">//使用IPv4地址</span></span><br><span class="line">serv_addr.sin_addr.s_addr=htonl(INADDR_ANY);<span class="comment">//ip地址</span></span><br><span class="line">serv_addr.sin_port=htons(atoi(argv[<span class="number">1</span>]));<span class="comment">//端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bind(serv_sock, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>)<span class="comment">//给创建好的套接字分配地址信息( 1P 地址和端口号 )（成功返回文件描述符，失败返回-1）</span></span><br><span class="line">error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (listen(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>) &#123;<span class="comment">////进入监听状态，等待用户发起请求</span></span><br><span class="line">error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clnt_addr_size=<span class="keyword">sizeof</span>(clnt_addr);</span><br><span class="line"><span class="comment">//接收客户端请求</span></span><br><span class="line">clnt_sock=accept(serv_sock, (struct sockaddr *)&amp;clnt_addr, &amp;clnt_addr_size);</span><br><span class="line"><span class="keyword">if</span> (clnt_sock == <span class="number">-1</span>)</span><br><span class="line">error_handling(<span class="string">"accept() error"</span>);</span><br><span class="line"></span><br><span class="line">write(clnt_sock, message, <span class="keyword">sizeof</span>(message)); <span class="comment">//向客户端发送数据</span></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line">close(clnt_sock);</span><br><span class="line">close(serv_sock);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Internet协议地址结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">__SOCKADDR_COMMON (sin_);</span><br><span class="line"><span class="keyword">in_port_t</span> sin_port;<span class="comment">/* Port number.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">/* Internet address.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pad to size of `struct sockaddr'.  */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (struct sockaddr) -</span><br><span class="line">   __SOCKADDR_COMMON_SIZE -</span><br><span class="line">   <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</span><br><span class="line">   <span class="keyword">sizeof</span> (struct in_addr)];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"><span class="keyword">__uint8_t</span>sa_len;<span class="comment">/* total length */</span></span><br><span class="line"><span class="keyword">sa_family_t</span>sa_family;<span class="comment">/* [XSI] address family */</span></span><br><span class="line"><span class="keyword">char</span>sa_data[<span class="number">14</span>];<span class="comment">/* [XSI] addr value (actually larger) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>通用地址结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> <span class="keyword">in_addr_t</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">in_addr_t</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>AF 表示ADDRESS FAMILY 地址族，PF 表示PROTOCOL FAMILY 协议族，但这两个宏定义是一样的，所以使用哪个都没有关系。AF_INET（又称 PF_INET）是 IPv4 网络协议的套接字类型，AF_INET6 则是 IPv6 的；而 AF_UNIX 则是 Unix 系统本地通信。</p></blockquote><blockquote><p>INADDR_ANY就是指定地址为0.0.0.0的地址，这个地址事实上表示不确定地址，或“所有地址”、“任意地址”。 一般来说，在各个系统中均定义成为0值。</p></blockquote><blockquote><p>htonl、htons主机字节序转换为网络字节序</p></blockquote><h2 id="tcp-客户端"><a href="#tcp-客户端" class="headerlink" title="tcp 客户端"></a>tcp 客户端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"><span class="keyword">char</span> message[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> str_len;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Usage : %s &lt;IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sock=socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//创建套接字</span></span><br><span class="line"><span class="keyword">if</span> (sock == <span class="number">-1</span>)</span><br><span class="line">error_handling(<span class="string">"socket() error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));<span class="comment">//每字节都用0填充</span></span><br><span class="line">serv_addr.sin_family=AF_INET;<span class="comment">//指定IPv4协议</span></span><br><span class="line">serv_addr.sin_addr.s_addr=inet_addr(argv[<span class="number">1</span>]);<span class="comment">//ip地址</span></span><br><span class="line">serv_addr.sin_port=htons(atoi(argv[<span class="number">2</span>]));<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (connect(sock, (struct sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == <span class="number">-1</span>)<span class="comment">//connect函数向服务器端发送连接请求（成功时返回 0，失败时返回-1）</span></span><br><span class="line">error_handling(<span class="string">"connect() error"</span>);</span><br><span class="line"></span><br><span class="line">str_len=read(sock, message, <span class="keyword">sizeof</span>(message)<span class="number">-1</span>);<span class="comment">//读取服务器传回的数据</span></span><br><span class="line"><span class="keyword">if</span> (str_len == <span class="number">-1</span>)</span><br><span class="line">error_handling(<span class="string">"read() error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Message from server : %s \n"</span>, message);</span><br><span class="line">close(sock);<span class="comment">//关闭套接字</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本编主要是自己在用c语言搭建socket编程的细节 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Socket编程" scheme="http://qinyongli.cn/tags/Socket%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>入门docker</title>
    <link href="http://qinyongli.cn/2018/03/29/%E5%85%A5%E9%97%A8docker/"/>
    <id>http://qinyongli.cn/2018/03/29/入门docker/</id>
    <published>2018-03-29T12:46:00.000Z</published>
    <updated>2018-04-03T09:04:04.708Z</updated>
    
    <content type="html"><![CDATA[<p>如果让我用一句话来形容docker的话。它简单易用，只是简单的操作拉取镜像和创建容器，然后你可以使用mysql、mongodb、redis、nginx等各类服务了。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>查看Docker的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [imageName]</span><br></pre></td></tr></table></figure><p>删除image镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker image rm [imageName]</span><br></pre></td></tr></table></figure><p>列出docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p>生成容器    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -p 3306:3306 --rm=true --name=mysql -v ./mysql:/etc/mysql -it -d mysql /bin/bash</span><br></pre></td></tr></table></figure><p>参数:</p><pre><code>- -p容器的 3306 端口映射到本机的 3306 端口。- -it 容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。- mysql 镜像的名称- /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。- -v 挂载本地目录到容器目录- --rm=true 容器停止运行后，自动删除容器文件x- --name=** 给容器命名- -d 在后台运行</code></pre><p>列出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls (--all)</span><br></pre></td></tr></table></figure><p>删除容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm [containerID/containerName]</span><br></pre></td></tr></table></figure></p><p>启动容器(前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container start [containerID]</span><br></pre></td></tr></table></figure><p>终止容器运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop</span><br></pre></td></tr></table></figure></p><p>进入一个正在运行的 docker 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container exec -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure><p>用于从正在运行的 Docker 容器里面，将文件拷贝到本机<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container cp [containID]:[/path/to/file] .</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果让我用一句话来形容docker的话。它简单易用，只是简单的操作拉取镜像和创建容器，然后你可以使用mysql、mongodb、redis、nginx等各类服务了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://qinyongli.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>数据库的那些事</title>
    <link href="http://qinyongli.cn/2017/12/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://qinyongli.cn/2017/12/09/数据库的那些事/</id>
    <published>2017-12-09T09:55:18.000Z</published>
    <updated>2017-12-11T12:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管理数据库"><a href="#管理数据库" class="headerlink" title="管理数据库"></a>管理数据库</h2><p>本篇将是自己在数据库方面的总结</p><a id="more"></a><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><h4 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user `user`@`host` identified by `password`;</span><br></pre></td></tr></table></figure><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user: "", pwd: "", roles: ["readWrite"]&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><h4 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser("sceley")</span><br></pre></td></tr></table></figure><h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p password</span><br></pre></td></tr></table></figure><h4 id="mongodb-1"><a href="#mongodb-1" class="headerlink" title="mongodb"></a>mongodb</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.update(&lt;username&gt;, &#123;</span><br><span class="line">pwd: &lt;password&gt;,</span><br><span class="line">roles: [&#123;role: &lt;&gt;, db: &lt;dbname&gt;&#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除用户-1"><a href="#删除用户-1" class="headerlink" title="删除用户"></a>删除用户</h3><h4 id="mysql-1"><a href="#mysql-1" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h4 id="mysql-2"><a href="#mysql-2" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create batabase `dbname`;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><h4 id="mysql-3"><a href="#mysql-3" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database `dbname`;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="mysql-4"><a href="#mysql-4" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>/integer =&gt; 整型</span><br><span class="line"><span class="keyword">double</span> =&gt; 双精度的浮点数</span><br><span class="line"><span class="keyword">float</span> =&gt; 浮点</span><br><span class="line"><span class="keyword">char</span> =&gt; 定长字符串</span><br><span class="line">varchar =&gt; 变长字符串</span><br><span class="line">text =&gt; 长文本数据</span><br><span class="line">date =&gt; 日期</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;管理数据库&quot;&gt;&lt;a href=&quot;#管理数据库&quot; class=&quot;headerlink&quot; title=&quot;管理数据库&quot;&gt;&lt;/a&gt;管理数据库&lt;/h2&gt;&lt;p&gt;本篇将是自己在数据库方面的总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="database" scheme="http://qinyongli.cn/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Nodejs多进程</title>
    <link href="http://qinyongli.cn/2017/11/17/%E6%B5%85%E8%B0%88Nodejs%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://qinyongli.cn/2017/11/17/浅谈Nodejs多进程/</id>
    <published>2017-11-17T03:57:10.000Z</published>
    <updated>2018-06-04T07:59:10.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>JavaScript是运行在单进程的单线程上，但是现在的计算机大多是多核CPU的。在nodejs中，为了充分利用多核cpu，引入了child_process和cluster这两个模块来开启多进程，来充分利用多核cpu。</p><a id="more"></a><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><h3 id="创建子进程"><a href="#创建子进程" class="headerlink" title="创建子进程"></a>创建子进程</h3><p>使用child_process模块提供的child_process.fork()函数提供我们实现进程的复制。</p><p>worker.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="built_in">Math</span>.round((<span class="number">1</span> + <span class="built_in">Math</span>.random()) * <span class="number">1000</span>, <span class="string">'127.0.0.1'</span>));</span><br></pre></td></tr></table></figure><p>master.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</span><br><span class="line"><span class="keyword">const</span> cpus = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</span><br><span class="line">    fork(<span class="string">'./worker.js'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码根据cpu的核数复制出相应Node进程数。</p><p>这是著名的Master-Worker模式，又称主从模式。分为两种进程: 主进程、工作进程。这就是典型的分布式架构中用于并行处理业务的模式，具备较好的可伸缩性和稳定性。主进程不负责具体的业务处理，而是负责调度或管理工作进程，它是趋向于稳定的。工作进程负责具体的业务处理，因为业务的多种多样，甚至一项业务有多人开发完成，所以工作进程的稳定性值得开发者关注。</p><p><img src="/img/worker-master.png" alt></p><h3 id="进程间通讯"><a href="#进程间通讯" class="headerlink" title="进程间通讯"></a>进程间通讯</h3><p>通过send方法发送数据，通过监听message事件来接受发来的数据。通过消息传递内容，而不是共享或直接操作相关资源，这是较为轻量和无依赖的做法。</p><p>example</p><p>parent.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> child = cp.fork(<span class="string">'child.js'</span>);</span><br><span class="line">child.on(<span class="string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`parent receive message: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">child.send(&#123;</span><br><span class="line">    hello: <span class="string">'world'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>child.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process.on(<span class="string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`child receive message: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">process.send(&#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过fork()或者其他API，创建子进程之后，为了实现父子进程之间的通讯，父进程和子进程之间将会创建IPC通道。通过IPC通道，父子进程之间才能通过message和send传递消息。</p><h4 id="进程间通信原理"><a href="#进程间通信原理" class="headerlink" title="进程间通信原理"></a>进程间通信原理</h4><p>请查看《Node.js深入浅出》</p><h4 id="句柄传递"><a href="#句柄传递" class="headerlink" title="句柄传递"></a>句柄传递</h4><p>细节请查看《Node.js深入浅出》</p><p>以发送的TCP服务器句柄为例，子进程收到消息后的还原过程如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">message, handle, emit</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> net.Server();</span><br><span class="line">server.listen(handle, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">emit(server);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>子进程根据message.type创建对应TCP服务器对象，然后监听到文件描述符上。</p><blockquote><p>Node进程之间只有消息传递，不会真正地传递对象。<br>多个应用监听相同的端口时，文件描述符同一时间只能被某个进程所用。换言之就是网络请求向服务器端发送时，只有一个幸运的进程能够抢到连接，也就是说只有它能为这个请求进行服务。这些进程服务是抢占式的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;JavaScript是运行在单进程的单线程上，但是现在的计算机大多是多核CPU的。在nodejs中，为了充分利用多核cpu，引入了child_process和cluster这两个模块来开启多进程，来充分利用多核cpu。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NODEJS" scheme="http://qinyongli.cn/tags/NODEJS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈数据上传</title>
    <link href="http://qinyongli.cn/2017/11/13/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0/"/>
    <id>http://qinyongli.cn/2017/11/13/浅谈数据上传/</id>
    <published>2017-11-13T15:28:41.000Z</published>
    <updated>2017-11-17T06:11:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本编总结一下自己在数据上传上的知识总结。</p><a id="more"></a><h2 id="数据上传"><a href="#数据上传" class="headerlink" title="数据上传"></a>数据上传</h2><h3 id="判断是否有请求数据"><a href="#判断是否有请求数据" class="headerlink" title="判断是否有请求数据"></a>判断是否有请求数据</h3><p>nodejs中，如果请求中带有内容部分(如POST请求，它具有报头和内容)，内容部分需要用户自行接受和解析。通过报头的Transfer-Encoding或Content-Length即可判断请求中是否带有内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hasBody = <span class="function"><span class="params">req</span> =&gt;</span> <span class="string">'transfer-encoding'</span> <span class="keyword">in</span> req.headers || <span class="string">'content-length'</span> <span class="keyword">in</span> req.headers;</span><br></pre></td></tr></table></figure><p>HTTP_Parser解析报头结束后，报文内容部分会通过data事件触发，我们只需以流的方式处理即可，如下所此:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hasBody(req)) &#123;</span><br><span class="line">        <span class="keyword">let</span> buffers = [];</span><br><span class="line">        req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">            buffers.push(chunk);</span><br><span class="line">        &#125;);</span><br><span class="line">        req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            req.rawBody = Buffer.concat(buffers).toString();</span><br><span class="line">            handle(req, res);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>默认的POST表单提交，请求头中的Content-Type字段值为application/x-www-form-urlencoded如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>它的报文体内容跟查询字符串相同:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo=bar&amp;baz=val</span><br></pre></td></tr></table></figure><p>因此解析它很容易:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handle = (req, res) &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.headers[<span class="string">'content-type'</span>] === <span class="string">'application/x-www-form-url'</span>) &#123;</span><br><span class="line">        req.body = querystring.parse(req.rawbody);</span><br><span class="line">    &#125;</span><br><span class="line">    todo(req, res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>get方式的表单提交，浏览器用x-www-form-urlencoded的编码方式把表单数据转换成一个字符串，然后添加到目标url地址后面。</p></blockquote><h3 id="其他格式"><a href="#其他格式" class="headerlink" title="其他格式"></a>其他格式</h3><p>JSON类型=&gt;application/json</p><p>XML=&gt;application/xml</p><p>注意的是，在Content-Type中还可能附加如下所示的编码信息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><p>所以在判断的时候，需要注意区分，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mime = <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = req.headers[<span class="string">'content-type'</span>] || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">';'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析JSON</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(mime(req) == <span class="string">'application/json'</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.body = <span class="built_in">JSON</span>.parse(req.rawBody);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            res.writeHead(<span class="number">400</span>);</span><br><span class="line">            req.end(<span class="string">'Invalid JSON'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        todo(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ajax提交"><a href="#ajax提交" class="headerlink" title="ajax提交"></a>ajax提交</h3><p>POST提交默认的类型Content-Type是:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span>: text/plain;charset=UTF-8</span><br></pre></td></tr></table></figure><p>通过.setRequestHeader(key, value)来设置请求头部信息。</p><p>比如设置提交类型为application/json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>GET是通过拼接url提交请求数据的，所以它的请求头中不具有Content-Type字段的东西。</p></blockquote><h3 id="附件上传"><a href="#附件上传" class="headerlink" title="附件上传"></a>附件上传</h3><p>附件上传数据类型为Content-Type: multipart/form-data</p><p>通过指定表单属性enctype为multipart/form-data来设定表单提交的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器遇到multipart/form-data表单提交时，构造的请求报文与普通表单完全不同。首先它的报头中最为特殊的如下所示: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length:575</span></span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryzMnpBNaj1z0QYAPt</span><br></pre></td></tr></table></figure><p><img src="/img/form-data.png" alt></p><p>它代表本次提交的内容是由多部分构成，其中boundary=…指定的是每部分的分界符，…是随机生成的一段字符串报文体内容将通过在它前面添加–进行分割，报文结束时在它前后都加上–表示结束。</p><p>解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(hasBody(req)) &#123;</span><br><span class="line">        <span class="keyword">let</span> done = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            handle(req, res);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(mime(req) === <span class="string">'application/json'</span>) &#123;</span><br><span class="line">            parseJSON(req, done);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(mime(req) == <span class="string">'application/xml'</span>) &#123;</span><br><span class="line">            parseXML(req, res);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(mime(req) == <span class="string">'multipart/form-data'</span>) &#123;</span><br><span class="line">            parseMultipart(req, done);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handle(req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;本编总结一下自己在数据上传上的知识总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NODEJS" scheme="http://qinyongli.cn/tags/NODEJS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈HTTPS、HTTP2</title>
    <link href="http://qinyongli.cn/2017/11/11/%E6%B5%85%E8%B0%88HTTPS%E3%80%81HTTP2/"/>
    <id>http://qinyongli.cn/2017/11/11/浅谈HTTPS、HTTP2/</id>
    <published>2017-11-11T08:38:58.000Z</published>
    <updated>2017-11-17T06:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>随着科技的发展，网络通讯对安全的要求越来越高。在如今，很多企业都在逐渐的把自己的网站升级为HTTPS、HTTP2，提高网站的安全可靠性。本编文章将总结自己在HTTPS、HTTP2上的学习。</p><a id="more"></a><h2 id="HTTPS协议的介绍"><a href="#HTTPS协议的介绍" class="headerlink" title="HTTPS协议的介绍"></a>HTTPS协议的介绍</h2><ul><li>HTTPS协议需要到CA申请证书。</li><li>HTTPS协议运行在SSL/TLS之上，SSL/TLS运行在TCP之上。</li><li>HTTPS使用443端口。</li><li>HTTPS可以方式有效防止运营商劫持。</li><li>HTTPS降低用户访问速度。SSL握手，HTTPS对速度会有一定程度的影响。</li></ul><h2 id="SPDY的介绍"><a href="#SPDY的介绍" class="headerlink" title="SPDY的介绍"></a>SPDY的介绍</h2><ul><li>降低延迟，针对HTTP高延迟的问题，SPDY采用多路复用。(多路复用: 多个请求stream共享一个tcp连接)</li><li>请求优先级。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。</li><li>header压缩。</li><li>基于HTTPS的加密协议传输。</li><li>服务器推送。(例如:网页有一个style.css请求，在客户端收到style.css数据的同时，服务器会将style.js的文件推送给客户端，当客户端再次尝试获取style.js时就可以直接从缓存中获取到)。</li><li>SPDY在SSL之上在HTTP之下。</li></ul><h2 id="HTTP2协议的介绍"><a href="#HTTP2协议的介绍" class="headerlink" title="HTTP2协议的介绍"></a>HTTP2协议的介绍</h2><p>HTTP2.0可以说是SPDY的升级版。</p><ul><li>二进制协议，HTTP1.x的解析是基于文本，HTTP2.0的协议解析采用二进制格式。HTTP1.x的头信息肯定是文本，数据体可以是文本也可以是二进制；HTTP2.0是彻底</li><li>多路复用。</li><li>header压缩，HTTP2.0使用encoder来减少传输的header大小，通讯双方各自cache一份header fileds表，即避免了重复header的传输，又减小了需要传输的大小。</li><li>服务器推送。</li><li>支持明文HTTP传输，而SPDY强制使用HTTPS。</li></ul><h2 id="签名证书"><a href="#签名证书" class="headerlink" title="签名证书"></a>签名证书</h2><p>自签名证书，就是自己扮演CA机构，给自己的服务器端颁发签名证书。以下为生成私钥、生成CSR文件、通过私钥自签名生成证书的过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out ca.key 1024</span><br><span class="line">$ openssl req -new -key ca.key -out ca.csr</span><br><span class="line">$ openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</span><br></pre></td></tr></table></figure><p>流程图如下</p><p><img src="/img/yourselfsign.png" alt></p><p>接下来到服务器端，服务器端需要向CA机构申请签名证书。在申请签名证书之前依然是要创建自己的CSR文件。值得注意的是，这个过程中的Common Name要匹配服务器域名，否则在后续认证过程中会出错。如下是生成命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out server.key 1024</span><br><span class="line">$ openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure><p><img src="/img/servercsr.png" alt></p><p>得到CSR文件后，向我们自己的CA机构申请签名。签名需要CA的证书和私钥参与，最终颁发一个带有CA签名的证书，如下所示: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt</span><br></pre></td></tr></table></figure><h2 id="HTTPS服务器"><a href="#HTTPS服务器" class="headerlink" title="HTTPS服务器"></a>HTTPS服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);<span class="comment">//https模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">    key: fs.readFileSync(<span class="string">'./server.key'</span>),<span class="comment">//私钥</span></span><br><span class="line">    cert: fs.readFileSync(<span class="string">'./server.crt'</span>),<span class="comment">//数字证书(签名证书)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> server = https.createServer(opts, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8443</span>);</span><br></pre></td></tr></table></figure><p>客户端访问结果</p><p><img src="/img/https.png" alt></p><h2 id="HTTP2服务器"><a href="#HTTP2服务器" class="headerlink" title="HTTP2服务器"></a>HTTP2服务器</h2><p>首先先下载第三方HTTP2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install http2 --save-dev</span><br></pre></td></tr></table></figure><p>然后编写代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http2 = <span class="built_in">require</span>(<span class="string">'./node_modules/http2'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">key: fs.readFileSync(<span class="string">'./server.key'</span>),</span><br><span class="line">cert: fs.readFileSync(<span class="string">'./server.crt'</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http2.createServer(options);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8443</span>);</span><br></pre></td></tr></table></figure><p>查看网络: </p><p><img src="/img/http2firefox.png" alt></p><p><img src="/img/http2chrome.png" alt></p><h2 id="通过Let’Encrypt获取第三方CA"><a href="#通过Let’Encrypt获取第三方CA" class="headerlink" title="通过Let’Encrypt获取第三方CA"></a>通过Let’Encrypt获取第三方CA</h2><p>自己充当CA自颁发数字证书虽然方便，但是客户端并不信任该证书，因为客户端并不包含用于签名的CA证书。</p><p>所以咱们使用Let’Encrypt机构给我们的服务器颁发证书。</p><p>使用certbot获取证书，certbot的官方介绍:</p><p>Certbot, previously the Let’s Encrypt Client, is EFF’s tool to obtain certs from Let’s Encrypt, and (optionally) auto-enable HTTPS on your server.</p><p>安装certbot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dl.eff.org/certbot-auto</span><br><span class="line">$ chmod a+x certbot-auto</span><br><span class="line">$ ./certbot-auto</span><br><span class="line">$ sudo certbot certonly</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;随着科技的发展，网络通讯对安全的要求越来越高。在如今，很多企业都在逐渐的把自己的网站升级为HTTPS、HTTP2，提高网站的安全可靠性。本编文章将总结自己在HTTPS、HTTP2上的学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://qinyongli.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>浅谈SSL/TLS</title>
    <link href="http://qinyongli.cn/2017/11/07/%E6%B5%85%E8%B0%88SSLTLS/"/>
    <id>http://qinyongli.cn/2017/11/07/浅谈SSLTLS/</id>
    <published>2017-11-07T11:36:45.000Z</published>
    <updated>2017-11-17T06:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在网络中，数据在服务器端和客户端之间传递，由于是明文传递的内容，一旦网络被人监控，数据就可能一览无余地展现在中间的窃听者面前。为此我们需要将数据加密后再进行网络传输，这样即使数据被截获和窃听，窃听者也无法知道数据的真实内容是什么。但是对于我们的应用层协议而言，如HTTP、FTP等，我们仍然希望能够透明地处理地处理数据，而无须操心网络传输过程中的安全问题。SSL作为一种安全协议，它在传输层提供对网络连接加密的功能。对于应用层而言，它是透明的，数据在传递到应用层之前就已经完成了加密和解密的过程。最初的SSL应用层在Web上，被服务器端和浏览器端同时支持，随后IETF将其标准化，称TLS(Transport Layer Security，安全传输层协议)。</p><a id="more"></a><h2 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS/SSL"></a>TLS/SSL</h2><h3 id="密匙"><a href="#密匙" class="headerlink" title="密匙"></a>密匙</h3><p>TLS/SSL是一个公钥/私钥的结构，它是一个非对称的结构，每个服务器端和客户端都有自己的公私钥。公钥用来加密要传输的数据，私钥用来解密接收到的数据。公钥和私钥是配对的，通过公钥加密的数据，只有通过私钥才能解密，所以在建立安全传输之前，客户端和服务器端之间需要互换公钥。客户端发送数据时要通过服务器端的公钥进行加密，服务器端发送数据时则需要客户端的公钥进行加密，如此才能完成加密解密的过程，如下图:</p><p><img src="/img/ssltls.png" alt></p><p>公私钥的非对称加密虽然好，但是网络中依然可能存在窃听的情况，典型的例子是中间人攻击。客户端和服务器端在交换公钥的过程中，中间人对客户端扮演服务器端的角色，对服务器端扮演客户端的角色，因此客户端和服务器端几乎感受不到中间人的存在。为了解决这种问题，数据传输过程中还需要对得到的公钥进行认证，以确认得到的公钥是出自目标服务器。如果不能保证这种认证，中间人可能会将伪造的站点响应给用户，从而造成经济损失。中间人攻击示意图:</p><p><img src="/img/attack.png" alt></p><p>为了解决这个问题，TLS/SSL引入了数字证书来进行认证。与直接用公钥不同，数据证书包含了服务器的名称和主机名、服务器的公钥、签名颁发机构的名称、来自签名颁发机构的签名。在连接建立前，会通过证书中的签名确认收到的公钥是来自目标服务器的，从而产生信任关系。</p><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>为了确保我们的数据安全，现在我们引入了一个第三方: CA(Certificate Authority, 数字证书认证中心)。CA的作用是为站点颁布证书，且这个证书中具有CA通过自己的公钥和私钥实现的签名。</p><p>为了得到签名证书，服务器端需要通过自己的私钥生成CSR(Certificate Signing Request，证书签名请求)文件。CA机构将通过这个文件颁发属于该服务器端的签名证书，只要通过CA机构就能验证证书是否合法。</p><p>通过CA机构颁发证书通常是一个繁琐的过程，需要付出一定的费力和精力。</p><p><img src="/img/checkca.png" alt></p><p>CA机构将证书颁发给服务器端后，证书在请求的过程中会被发送给客户端，客户端需要通过CA的证书验证真伪。如果是知名的CA机构，它们的证书一般预装在浏览器中。</p><h3 id="SSL作用"><a href="#SSL作用" class="headerlink" title="SSL作用"></a>SSL作用</h3><ul><li>所有信息都是加密传播，第三方无法窃听。</li><li>具有校验机制，一旦被篡改，通信双方会立刻发现。</li><li>配备身份证书，防止身份被冒充。</li></ul><h3 id="TLS-SSL协议的组成"><a href="#TLS-SSL协议的组成" class="headerlink" title="TLS/SSL协议的组成"></a>TLS/SSL协议的组成</h3><p><img src="/img/TLSdetail.jpg" alt></p><p>TLS/SSL协议又可以分为两层，上层分为三个子协议: HandShake，ChangeCiperSpec，Alert，下层为Recode。</p><h3 id="SSL基本的运行机制"><a href="#SSL基本的运行机制" class="headerlink" title="SSL基本的运行机制"></a>SSL基本的运行机制</h3><p>SSL/TLS协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p><h4 id="公钥加密计算量太大，如何减少耗用的时间？"><a href="#公钥加密计算量太大，如何减少耗用的时间？" class="headerlink" title="公钥加密计算量太大，如何减少耗用的时间？"></a>公钥加密计算量太大，如何减少耗用的时间？</h4><p>解决方法：每一次对话（session），客户端和服务器端都生成一个”对话密钥”（session key），用它来加密信息。由于”对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密”对话密钥”本身，这样就减少了加密运算的消耗时间。</p><blockquote><p>对称加密: 同一个密钥可以同时用作信息的加密和解密。<br>非对称加密: 需要两个密钥：公开密钥（publickey）和私有密钥（privatekey），如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。</p></blockquote><p>SSL/TLS协议的基本过程是这样的：</p><ul><li>客户端向服务器端索要并验证公钥。</li><li>双方协商生成”对话密钥”。</li><li>双方采用”对话密钥”进行加密通信。</li></ul><p>上面过程的前两步，又称为”握手阶段”（handshake）。</p><h3 id="TLS-SSL协议的握手过程"><a href="#TLS-SSL协议的握手过程" class="headerlink" title="TLS/SSL协议的握手过程"></a>TLS/SSL协议的握手过程</h3><p>HTTPS通信建立的过程其实是这样子的: 首先完成TCP三次握手，再进行TLS/SSL握手，以上两类握手完成后就建立了一个安全的通道，最后才进行HTTP通讯。</p><p>五步握手: </p><ol><li>TLS/SSL客户端会发送一个成为“Client Hello”的消息包，里面包含了一串随机字符串（Client random）、SSL/TLS的版本和客户端支持的已经按优先次序排列的密码族。</li><li>TLS/SSL服务器这边也会响应一个“Server Hello”的消息包，里面包含了一串随机字符串（Server random）、服务器选择的加密方式、服务器的数字证书、以及session ID。</li><li>TLS/SSL客户端先是核实了服务器的数字证书后，使用服务器提供的公钥加密一串预主密钥(premaster secret)发送给服务器。</li><li>TLS/SSL服务器使用自己的密钥解密获取预主密钥(premaster key)。</li><li>最后双方根据前面的协商好的加密方式，结合两串随机字符串(Client random, Server random)和预主密钥(premaster key)生成后续应用层通信使用的会话秘钥，至此完成了安全通道的建立，后续的消息通讯可以使用这个会话秘钥加密进行。<br><img src="http://image.beekka.com/blog/2014/bg2014092003.png" alt></li></ol><p>抓包看看，如下图:</p><p>Client Hello包:</p><p><img src="/img/SSLdetail.png" alt></p><p>Server Hello包:</p><p><img src="/img/ServerHello.png" alt></p><p>抓到的TLS包:</p><p><img src="/img/packets.png" alt></p><h3 id="私钥的作用"><a href="#私钥的作用" class="headerlink" title="私钥的作用"></a>私钥的作用</h3><ul><li>生成对话密钥一共需要三个随机数。</li><li>握手之后的对话使用”对话密钥”加密（对称加密），服务器的公钥和私钥只用于加密和解密”对话密钥”（非对称加密），无其他作用。</li><li>服务器公钥放在服务器的数字证书之中。</li></ul><p>从上面第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次。这就是CloudFlare能够提供Keyless服务的根本原因。</p><p>某些客户（比如银行）想要使用外部CDN，加快自家网站的访问速度，但是出于安全考虑，不能把私钥交给CDN服务商。这时，完全可以把私钥留在自家服务器，只用来解密对话密钥，其他步骤都让CDN服务商去完成。</p><p><img src="http://image.beekka.com/blog/2014/bg2014092005.png" alt></p><p>上图中，银行的服务器只参与第四步，后面的对话都不再会用到私钥了。</p><h3 id="DH算法的握手阶段"><a href="#DH算法的握手阶段" class="headerlink" title="DH算法的握手阶段"></a>DH算法的握手阶段</h3><p>整个握手阶段都不加密（也没法加密），都是明文的。因此，如果有人窃听通信，他可以知道双方选择的加密方法，以及三个随机数中的两个。整个通话的安全，只取决于第三个随机数（Premaster secret）能不能被破解。</p><p>虽然理论上，只要服务器的公钥足够长（比如2048位），那么Premaster secret可以保证不被破解。但是为了足够安全，我们可以考虑把握手阶段的算法从默认的RSA算法，改为 Diffie-Hellman算法（简称DH算法）。</p><p>采用DH算法后，Premaster secret不需要传递，双方只要交换各自的参数，就可以算出这个随机数。</p><p><img src="http://image.beekka.com/blog/2014/bg2014092007.png" alt></p><p>上图中，第三步和第四步由传递Premaster secret变成了传递DH算法所需的参数，然后双方各自算出Premaster secret。这样就提高了安全性。</p><h3 id="session的恢复"><a href="#session的恢复" class="headerlink" title="session的恢复"></a>session的恢复</h3><p>握手阶段用来建立SSL连接。如果出于某种原因，对话中断，就需要重新握手。</p><p>这时有两种方法可以恢复原来的session：一种叫做session ID，另一种叫做session ticket。</p><p>session ID的思想很简单，就是每一次对话都有一个编号（session ID）。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的”对话密钥”，而不必重新生成一把。</p><p><img src="http://image.beekka.com/blog/2014/bg2014092009.png" alt></p><p>session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。</p><p><img src="http://image.beekka.com/blog/2014/bg2014092011.png" alt></p><p>上图中，客户端不再发送session ID，而是发送一个服务器在上一次对话中发送过来的session ticket。这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在网络中，数据在服务器端和客户端之间传递，由于是明文传递的内容，一旦网络被人监控，数据就可能一览无余地展现在中间的窃听者面前。为此我们需要将数据加密后再进行网络传输，这样即使数据被截获和窃听，窃听者也无法知道数据的真实内容是什么。但是对于我们的应用层协议而言，如HTTP、FTP等，我们仍然希望能够透明地处理地处理数据，而无须操心网络传输过程中的安全问题。SSL作为一种安全协议，它在传输层提供对网络连接加密的功能。对于应用层而言，它是透明的，数据在传递到应用层之前就已经完成了加密和解密的过程。最初的SSL应用层在Web上，被服务器端和浏览器端同时支持，随后IETF将其标准化，称TLS(Transport Layer Security，安全传输层协议)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://qinyongli.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之集合运算</title>
    <link href="http://qinyongli.cn/2017/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9B%86%E5%90%88%E8%BF%90%E7%AE%97/"/>
    <id>http://qinyongli.cn/2017/11/07/数据结构之集合运算/</id>
    <published>2017-11-07T05:51:50.000Z</published>
    <updated>2017-11-17T06:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>数据结构在编程中占据重要地位，程序的好坏与你的数据结构算法有重大的关系。而本篇则是关于我在写了一篇数据结构作业后的总结。</p><a id="more"></a><h2 id="包含的运算"><a href="#包含的运算" class="headerlink" title="包含的运算"></a>包含的运算</h2><ul><li>交集(∩)</li><li>并集(∪)</li><li>减集(-)</li></ul><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>线性表节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据存储</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span><span class="comment">//指向节点的指针</span></span><br><span class="line">&#125; LinkNode, *LinkNodePtr;</span><br></pre></td></tr></table></figure><p>线性表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkList</span> &#123;</span></span><br><span class="line">    LinkNodePtr head;<span class="comment">//指向头部的指针</span></span><br><span class="line">    LinkNodePtr tail;<span class="comment">//指向尾部的指针</span></span><br><span class="line">    <span class="keyword">int</span> len;<span class="comment">//线性表长度</span></span><br><span class="line">&#125; LinkList;</span><br></pre></td></tr></table></figure><p>初始化线性表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    L.len = <span class="number">0</span>;<span class="comment">//长度置零</span></span><br><span class="line">    L.head = L.tail = (LinkNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));<span class="comment">//一个头结点</span></span><br><span class="line">    L.head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输入一个集合</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> e;</span><br><span class="line">    <span class="keyword">int</span> locate;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;e;<span class="comment">//输入字符</span></span><br><span class="line">        <span class="keyword">if</span>(e &gt;= <span class="string">'a'</span> &amp;&amp; e &lt;= <span class="string">'z'</span>) &#123;<span class="comment">//e的大小在a-z</span></span><br><span class="line">            locate = FindLocate(L, e);<span class="comment">//有序链表，所以找出适合它大小的位置</span></span><br><span class="line">            ListInsert(L, locate, e);<span class="comment">//插入到线性表中特定位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把元素插入表中，如果存在重复则不差入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> locate, <span class="keyword">char</span> e)</span> </span>&#123;</span><br><span class="line">    LinkNodePtr q;<span class="comment">//指针</span></span><br><span class="line">    q = L.head-&gt;next;<span class="comment">//指向第一个节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; locate - <span class="number">1</span>; i++) &#123;<span class="comment">//直到指向locate - 1节点</span></span><br><span class="line">       q = q-&gt;next;<span class="comment">//指针往后指</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;next != <span class="literal">NULL</span> &amp;&amp; e == q-&gt;next-&gt;data) &#123;<span class="comment">//如果第locate位置的值等于e，则直接return</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        LinkNodePtr p;<span class="comment">//指针</span></span><br><span class="line">        p = (LinkNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));<span class="comment">//申请一个节点</span></span><br><span class="line">        p-&gt;data = e;</span><br><span class="line">        p-&gt;next = q-&gt;next;</span><br><span class="line">        q-&gt;next = p;<span class="comment">//在locate位置插入p</span></span><br><span class="line">        L.len++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>打印出一个集合</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">    LinkNodePtr p;<span class="comment">//一个节点指针</span></span><br><span class="line">    p = L.head-&gt;next;<span class="comment">//指向第一个节点</span></span><br><span class="line">    <span class="keyword">for</span>(; p != <span class="literal">NULL</span>;) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data;<span class="comment">//打印数据</span></span><br><span class="line">        p = p-&gt;next;<span class="comment">//指针往后指</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>获取特定位置的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetElem</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, <span class="keyword">char</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    LinkNodePtr p;<span class="comment">//一个节点指针</span></span><br><span class="line">    p = L.head-&gt;next;<span class="comment">//指向第一个节点</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; j &lt; i; j++) &#123;<span class="comment">//获取第i个节点的值</span></span><br><span class="line">        p = p-&gt;next;<span class="comment">//指针往后指</span></span><br><span class="line">    &#125;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把元素推入L中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListAppend</span><span class="params">(LinkList &amp;L, <span class="keyword">char</span> e)</span> </span>&#123;</span><br><span class="line">    LinkNodePtr p;</span><br><span class="line">    p = (LinkNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    L.tail-&gt;next = p;<span class="comment">//往链表尾部加元素</span></span><br><span class="line">    L.tail = p;<span class="comment">//把尾指针指向最后一个元素</span></span><br><span class="line">    L.tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    L.len++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>求减集</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reduce</span><span class="params">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aLen = La.len;</span><br><span class="line">    <span class="keyword">int</span> bLen = Lb.len;</span><br><span class="line">    <span class="keyword">bool</span> equal;</span><br><span class="line">    <span class="keyword">char</span> ae;</span><br><span class="line">    <span class="keyword">char</span> be;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= aLen; i++) &#123;</span><br><span class="line">        GetElem(La, i, ae);<span class="comment">//获取La的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= bLen; j++) &#123;</span><br><span class="line">            GetElem(Lb, j, be);<span class="comment">//获取Lb的元素</span></span><br><span class="line">            equal = Equal(ae, be);</span><br><span class="line">            <span class="keyword">if</span>(equal)</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//一遇到一样的马上退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!equal) &#123;</span><br><span class="line">            ListAppend(Lc, ae);<span class="comment">//La中与Lb中不一样的进入Lc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/img/reduceset.png" alt></p><p>求并集函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sum</span><span class="params">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aLen = La.len;</span><br><span class="line">    <span class="keyword">int</span> bLen = Lb.len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= aLen; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> e;</span><br><span class="line">        GetElem(La, i, e);</span><br><span class="line">        ListAppend(Lc, e);<span class="comment">//先把La中的元素都放进Lc</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bLen; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> locate;</span><br><span class="line">        <span class="keyword">char</span> e;</span><br><span class="line">        GetElem(Lb, i, e);</span><br><span class="line">        locate = FindLocate(Lc, e);</span><br><span class="line">        ListInsert(Lc, locate, e);<span class="comment">//然后把Lb中的元素插进，在ListInsert函数内部中判断重复</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>求交集函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Intersection</span><span class="params">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aLen = La.len;</span><br><span class="line">    <span class="keyword">int</span> bLen = Lb.len;</span><br><span class="line">    <span class="keyword">bool</span> equal;</span><br><span class="line">    <span class="keyword">char</span> ae;</span><br><span class="line">    <span class="keyword">char</span> be;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= aLen; i++) &#123;</span><br><span class="line">        GetElem(La, i, ae);<span class="comment">//取La的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= bLen; j++) &#123;</span><br><span class="line">            GetElem(Lb, j, be);<span class="comment">//取Lb的元素</span></span><br><span class="line">            equal = Equal(ae, be);<span class="comment">//判断他们是否相等</span></span><br><span class="line">            <span class="keyword">if</span>(equal) &#123;<span class="comment">//相等则压入线性表Lc中</span></span><br><span class="line">                ListAppend(Lc, ae);</span><br><span class="line">                <span class="keyword">break</span>;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;数据结构在编程中占据重要地位，程序的好坏与你的数据结构算法有重大的关系。而本篇则是关于我在写了一篇数据结构作业后的总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://qinyongli.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Cookie、Session、JWTS</title>
    <link href="http://qinyongli.cn/2017/11/03/%E6%B5%85%E8%B0%88Cookie%E3%80%81Session%E3%80%81JWTS/"/>
    <id>http://qinyongli.cn/2017/11/03/浅谈Cookie、Session、JWTS/</id>
    <published>2017-11-03T14:35:10.000Z</published>
    <updated>2017-11-17T06:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>HTTP是一个无状态的协议，现实中的业务却是需要一定的状态的，否则无法区分用户之间的身份。</p><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="初识Cookie"><a href="#初识Cookie" class="headerlink" title="初识Cookie"></a>初识Cookie</h3><p>HTTP是无状态的，如何标识和认证一个用户，最早的方案就是Cookie（曲奇饼）。它能记录服务器与客户端之间的状态，最早的用处就是用来判断用户是否第一次访问网站。在1997年形成规范RFC 2109，目前最新的规范为RFC 6065，它是一个由浏览器和服务器共同协作实现的规范。</p><p>Cookie的处理分为如下几步。</p><ul><li>服务器向客户端发送Cookie。</li><li>浏览器将Cookie保存。</li><li>之后每次浏览器都将会将Cookie发向服务器端。</li></ul><p>客户端发送的Cookie在请求报文的Cookie字段中。</p><p>HTTP_Parser会将所有的报文字段解析到req.headers，那么Cookie就是req.headers.cookie。根据规范中的定义，Cookie值的格式是key-value; key2=value2形式，如果我们需要Cookie，解析它也十分容易。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parseCookie = <span class="function"><span class="keyword">function</span> (<span class="params">cookie</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cookies = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(!cookie) &#123;</span><br><span class="line">        <span class="keyword">return</span> cookies;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> list = cookie.split(<span class="string">';'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> pair = list[i].split(<span class="string">'='</span>);</span><br><span class="line">        cookies[pair[<span class="number">0</span>].trim()] = pair[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookies;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在业务逻辑代码执行之前，我们将其挂载在req对象上，让业务代码可以直接访问，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    req.cookies = parseCookie(req.headers.cookie);</span><br><span class="line">    handle(req, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的业务代码就可以进行判断处理了，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">if</span>(req.cookies.isVisit) &#123;</span><br><span class="line">        res.end(<span class="string">'欢迎第一次来到动物园'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>告知客户端的方式是通过响应报文实现的，响应的Cookie值在Set-Cookie字段中。它的格式与请求中的格式不太相同，规范中对它的定义如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: name=value; Path=<span class="string">'/'</span>;Expires=Sun, <span class="number">23</span>-Apr<span class="number">-23</span> <span class="number">09</span>:<span class="number">01</span>:<span class="number">35</span> GMT; Domain=.domain.com;</span><br></pre></td></tr></table></figure><p>其中name=value是必须包含的部分，其余部分皆是可选参数。这些可选参数将会影响浏览器在后续将Cookie发送给服务器端的行为。以下为主要的几个选项。</p><ul><li>path表示这个Cookie影响到的路径，当前访问的路径不满足该匹配时，浏览器则不发送这个Cookie。</li><li>Expires和Max-Age是用来告知浏览器这个Cookie何时过期，如果不设置该选项，在关闭浏览器时将会丢失掉这个Cookie。如果设置了过期时间，浏览器将会把Cookie内容写入到磁盘中并保存，下次打开浏览器依旧有效。Expires的值是一个UTC格式的时间字符串，告知浏览器此Cookie何时将过期，Max-Age则告知浏览器此Cookie多久过期。前者一般而言不存在问题，但是如果服务器端的时间和客户端的时间不能匹配，这种时间设置就会存在偏差。为此，Max-Age告知浏览器这条Cookie多久之后过期，而不是一个具体的时间点。</li><li>HttpOnly告知浏览器不允许通过脚本document.cookie去更改这个Cookie值，事实上，设置HttpOnly之后，这个值在document.cookie中不可见。但是在HTTP请求过程中，依然会发送这个Cookie到服务器端。</li><li>Secure。当Secure值为true时，在HTTP中是无效的，在HTTPS中才有效，表示创建的Cookie只能在HTTPS连接中被浏览器传递到服务器端进行通话验证，如果是HTTP连接则不会传递该消息，所以很难被窃听到。</li></ul><p>知道Cookie在报文头中的具体格式后，下面我们将Cookie序列化成符合规范的字符串，相关代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> serialize = <span class="function"><span class="keyword">function</span> (<span class="params">name, val, opt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pairs = [name + <span class="string">'='</span> + encode(val)];</span><br><span class="line">    opt = opt || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(opt.maxAge) pairs.push(<span class="string">`Max-Age=<span class="subst">$&#123;opt.maxAge&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.domain) pairs.push(<span class="string">`Domain=<span class="subst">$&#123;opt.domain&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.path) pairs.push(<span class="string">`Path=<span class="subst">$&#123;opt.path&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.expires) pairs.push(<span class="string">`Expires=<span class="subst">$&#123;opt.expires.toUTCString()&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.httpOnly) pairs.push(<span class="string">`HttpOnly`</span>);</span><br><span class="line">    <span class="keyword">if</span>(opt.secure) pairs.push(<span class="string">`Secure`</span>);</span><br><span class="line">    <span class="keyword">return</span> pairs.join(<span class="string">`; `</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>判断用户的状态，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.cookies.isVisit) &#123;</span><br><span class="line">        req.setHeader(<span class="string">`Set-Cookie, <span class="subst">$&#123;serialize(<span class="string">'isVisit'</span>, <span class="number">1</span>)&#125;</span>`</span>);</span><br><span class="line">        res.writeHead(<span class="number">200</span>);</span><br><span class="line">        res.end(<span class="string">'欢迎第一次来动物园'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.writeHad(<span class="number">200</span>);</span><br><span class="line">        res.end(<span class="string">`动物园再次欢迎你`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>客户端收到这个带Set-Cookie的响应后，在之后的请求时会在Cookie字段中带上这个值。</p><p>Set-Cookie是较少的，在报头中可能存在多字段。为此res.setHeader的第二个参数可以是一个数组，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: foo=bar; Path=<span class="regexp">/; Expires=Sun, 23-Apr-23 09:01:35 GMT; Domain=.domain.com</span></span><br><span class="line"><span class="regexp">Set-Cookie: foo=val; Path=/</span>; Expires=Sun, <span class="number">23</span>-Apr<span class="number">-23</span> <span class="number">09</span>:<span class="number">01</span>:<span class="number">35</span> GMT; Domain=.domain.com</span><br></pre></td></tr></table></figure><h3 id="Cookie的性能影响"><a href="#Cookie的性能影响" class="headerlink" title="Cookie的性能影响"></a>Cookie的性能影响</h3><p>由于Cookie的实现机制，一旦服务器端向客户端发送了设置Cookie的意图，除非Cookie过期，否则客户端每次请求都会发送这些Cookie到服务器端，一旦设置的Cookie过多，将会导致报头较大。大多数的Cookie并不需要每次都用上，因为这会造成宽带的部分浪费。在YSlow的性能优化规则中有这么一条:</p><ul><li>减小Cookie的大小</li><li>为静态组件使用不同的域名</li><li>减少DNS查询</li></ul><blockquote><p>如果在域名的根节点设置Cookie，几乎所有的子路径下的请求都会带上这些Cookie</p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Cookie并非完美，前文提及的体积过大就是一个显著的问题，最为严重的问题是Cookie可以在前后端进行修改，因此数据就极容易被篡改和伪造。</p><p>Session的数据只保留在服务器端，客户端无法修改，这样数据的安全性得到一定的保障，数据也无须在协议中每次都被传递。</p><p>将每个客户端和服务器中的数据一一对应起来的两种实现方式。</p><h4 id="基于Cookie来实现用户和数据的映射。-口令sessionid"><a href="#基于Cookie来实现用户和数据的映射。-口令sessionid" class="headerlink" title="基于Cookie来实现用户和数据的映射。(口令sessionid)"></a>基于Cookie来实现用户和数据的映射。(口令sessionid)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sessions = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">'session_id'</span>;</span><br><span class="line"><span class="keyword">let</span> EXPIRES = <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> session = &#123;&#125;;</span><br><span class="line">    session.id = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="built_in">Math</span>.random();</span><br><span class="line">    session.cookie = &#123;</span><br><span class="line">        expires: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</span><br><span class="line">    &#125;;</span><br><span class="line">    sessions[session.id] = session;</span><br><span class="line">    <span class="keyword">return</span> session;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><p>每一次请求到来时，检查Cookie中的口令与服务器端的数据，如果过期，就重新生成，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id = req.cookies[key];</span><br><span class="line">    <span class="keyword">if</span>(!id) &#123;</span><br><span class="line">        req.session = generate();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> session = sessions[id];</span><br><span class="line">        <span class="keyword">if</span>(session) &#123;</span><br><span class="line">            <span class="keyword">if</span>(session.cookie.expires &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() ) &#123;</span><br><span class="line">                <span class="comment">//更新超时时间</span></span><br><span class="line">                session.cookie.expires = <span class="built_in">Date</span>.now() + EXPIRES;</span><br><span class="line">                req.session = session;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果超时了，删除旧数据，并重新生成。</span></span><br><span class="line">                <span class="keyword">delete</span> sessions[id];</span><br><span class="line">                req.session = gennerate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果session过期或口令不对，重新生成session</span></span><br><span class="line">            res.session = generate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handle(req, res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把重新生成的Session响应给客户。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> writeHead = res.writeHead;</span><br><span class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</span><br><span class="line">    <span class="keyword">let</span> session = serialize(key, req.session.id);</span><br><span class="line">    cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session];</span><br><span class="line">    res.setHeader(<span class="string">'Set-Cookie'</span>, cookies);</span><br><span class="line">    <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Sesion依赖于Cookie实现，是目前大多数Web应用的方案。</p><h4 id="通过查询字符串来实现浏览器和服务器端数据对应"><a href="#通过查询字符串来实现浏览器和服务器端数据对应" class="headerlink" title="通过查询字符串来实现浏览器和服务器端数据对应"></a>通过查询字符串来实现浏览器和服务器端数据对应</h4><p>略…</p><h3 id="Session问题"><a href="#Session问题" class="headerlink" title="Session问题"></a>Session问题</h3><h4 id="Session与内存"><a href="#Session与内存" class="headerlink" title="Session与内存"></a>Session与内存</h4><h4 id="Session与安全"><a href="#Session与安全" class="headerlink" title="Session与安全"></a>Session与安全</h4><p>口令保存在客户端，口令可能会被盗取，口令可能会被伪造。</p><p>对口令通过私钥加密进行签名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val + <span class="string">'.'</span> + crypto</span><br><span class="line">        .createHmac(<span class="string">'sha256'</span>, secret)</span><br><span class="line">        .update(val)</span><br><span class="line">        .digest(<span class="string">'base64'</span>)</span><br><span class="line">        .replace(<span class="regexp">/\=+$/</span>, <span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在响应时，设置session值到Cookie中，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> val = sign(req.sessionID, secret);</span><br><span class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, cookie.serialize(key, val));</span><br></pre></td></tr></table></figure><p>接收请求时，检查签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unsign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = val.slice(<span class="number">0</span>, val.lastIndex(<span class="string">'.'</span>));</span><br><span class="line">    <span class="keyword">return</span> sign(str, secret) == val ? str : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JSON-Web-Token-JWT"><a href="#JSON-Web-Token-JWT" class="headerlink" title="JSON Web Token (JWT)"></a>JSON Web Token (JWT)</h3><p><a href="https://jwt.io" target="_blank" rel="noopener">jwt</a>官方介绍</p><p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.</p><h4 id="jwt的组成"><a href="#jwt的组成" class="headerlink" title="jwt的组成"></a>jwt的组成</h4><p>一个jwt实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p><h4 id="头部-Header"><a href="#头部-Header" class="headerlink" title="头部(Header)"></a>头部(Header)</h4><p>The header typically consists of two parts: the type of the token, which is JWT, and the hashing algorithm being used, such as HMAC SHA256 or RSA.</p><p>用于描述关于该JWT的最基本信息，类型与签名所用的算法。</p><p>for example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, this JSON is Base64Url encoded to form the first part of the JWT.</p><h4 id="载荷-Payload"><a href="#载荷-Payload" class="headerlink" title="载荷(Payload)"></a>载荷(Payload)</h4><p>The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically, the user) and additional metadata. There are three types of claims: reserved, public, and private claims.</p><ul><li>Reserved claims: These are a set of predefined claims which are not mandatory but recommended, to provide a set of useful, interoperable claims. Some of them are: iss (issuer), exp (expiration time), sub (subject), aud (audience), and others.</li><li>Public claims: These can be defined at will by those using JWTs. But to avoid collisions they should be defined in the IANA JSON Web Token Registry or be defined as a URI that contains a collision resistant namespace.</li><li>These are the custom claims created to share information between parties that agree on using them.</li></ul><p>An example of payload could be:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="string">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The payload is then Base64Url encoded to form the second part of the JSON Web Token</p><h4 id="签名-signature"><a href="#签名-signature" class="headerlink" title="签名(signature)"></a>签名(signature)</h4><p>To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p><p>For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>The signature is used to verify that the sender of the JWT is who it says it is and to ensure that the message wasn’t changed along the way.</p><h4 id="放它们到一起"><a href="#放它们到一起" class="headerlink" title="放它们到一起"></a>放它们到一起</h4><p>The output is three Base64 strings separated by dots that can be easily passed in HTML and HTTP environments.</p><p>The following shows a JWT that has the previous header and payload encoded, and it is signed with a secret. </p><p><img src="https://cdn.auth0.com/content/jwt/encoded-jwt3.png" alt></p><h4 id="JWT是怎么样工作的"><a href="#JWT是怎么样工作的" class="headerlink" title="JWT是怎么样工作的"></a>JWT是怎么样工作的</h4><p><img src="https://cdn.auth0.com/content/jwt/jwt-diagram.png" alt></p><h4 id="JWT与Session的区别"><a href="#JWT与Session的区别" class="headerlink" title="JWT与Session的区别"></a>JWT与Session的区别</h4><p><img src="/img/session.png" alt></p><p><img src="/img/token.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;HTTP是一个无状态的协议，现实中的业务却是需要一定的状态的，否则无法区分用户之间的身份。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NODEJS" scheme="http://qinyongli.cn/tags/NODEJS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Node-WebSocket</title>
    <link href="http://qinyongli.cn/2017/11/03/%E6%B5%85%E8%B0%88Node-WebSocket/"/>
    <id>http://qinyongli.cn/2017/11/03/浅谈Node-WebSocket/</id>
    <published>2017-11-03T03:12:45.000Z</published>
    <updated>2017-11-17T06:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>WebSocket在客户端与服务器端的通讯中占有重要的地位，基于WebSocket客户端可以随时向服务器端发送数据，服务器也可以随时向客户端发送数据。多人在线聊天室就是基于WebSocket构建的。</p><a id="more"></a><h2 id="构建WebSocket服务"><a href="#构建WebSocket服务" class="headerlink" title="构建WebSocket服务"></a>构建WebSocket服务</h2><p>Websocket与Node之间的配合堪称完成完美，其理由有两条:</p><ul><li>WebSocket客户端基于事件的编程模型与Node中自定义事件相差无几。</li><li>WebSocket实现了客户端与服务器端之间的长连接，而Node事件驱动的方式十分擅长与大量客户端保持高并发连接。</li></ul><h3 id="WebSocket的介绍"><a href="#WebSocket的介绍" class="headerlink" title="WebSocket的介绍"></a>WebSocket的介绍</h3><ul><li>客户端与服务器端只建立一个TCP连接，可以使用更少的连接。</li><li>WebSocket服务器可以推送数据到客户端，这远比HTTP请求响应模式更灵活、更高效。</li><li>有更轻量级的协议头，减少数据传送量。</li></ul><p>在WebSocket之前，网页客户端与服务器端进行通信最高效的是Comet技术。实现Comet技术的细节是采用长轮询(long-polling)或iframe流。</p><p>WebSocket与HTTP相比，它更接近于传输层协议，它并没有在HTTP的基础上模拟服务器端的推送，而是在TCP上定义独立的协议。让人迷惑的部分在于它的握手部分是由HTTP完成的，使人觉得它可能是基于HTTP实现的。</p><p>WebSocket协议主要分为两个部分: 握手和数据传输。</p><h3 id="WebSocket握手"><a href="#WebSocket握手" class="headerlink" title="WebSocket握手"></a>WebSocket握手</h3><p>客户端建立连接时，通过HTTP发起请求报文，如下所示:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.exaple.com</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: dGh1IHNhbXBsZSBub25jZQ==</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat，superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br></pre></td></tr></table></figure><p>与普通的HTTP请求协议略有区别的部分在于如下这些协议头:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br></pre></td></tr></table></figure><p>上述两个字段表示请求服务器端升级协议头为WebSocket。其中Sec-WebSocket-Key用于安全校验: </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: dGh1IHNhbXBsZSBub25jZQ==</span><br></pre></td></tr></table></figure><p>Sec-WebSocket-Key的值是随机生成的Base64编码的字符串。服务器端接收到之后将其与与字符串258EAFA5-E914-47DA-95CA-C5ABoDC85B11相连，形成字符串dGh1IHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5ABoDC85B11，然后通过sha1安全散列算法计算出结果后，在进行Base64编码，最后返回给客户端。这个算法如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> val = crypto.crateHash(<span class="string">'sha1'</span>).update(key).digest(<span class="string">'base64'</span>);</span><br></pre></td></tr></table></figure><p>另外，下面两个字段指定子协议和版本号: </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat，superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: 13</span><br></pre></td></tr></table></figure><p>服务器端在处理完请求后，响应如下报文</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span>: webSocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: s3pPLMBiTaxaQ9kYGzzhZRbK+xOo=</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat</span><br></pre></td></tr></table></figure><p>上面的报文告之客户端正在更换协议，更新应用层协议为WebSocket协议，并在当前的套接字连接上应用新协议。剩余字段分别表示服务器端基于Sec-WebSocket-Key生成的字符串和选中的子协议。客户端将会校验Sec-WebSocket-Accept的值，如果成功，将开始接下来的数据传输。</p><h4 id="Node构建WebSocket客户端"><a href="#Node构建WebSocket客户端" class="headerlink" title="Node构建WebSocket客户端"></a>Node构建WebSocket客户端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hostportpath = url.split(<span class="string">'//'</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> host = hostportpath.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> portpath = hostportpath.split(<span class="string">':'</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> port = portpath.split(<span class="string">'/'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        port,</span><br><span class="line">        host</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//伪代码，解析ws://127.0.0.1:12010/updates，用于请求</span></span><br><span class="line">    <span class="keyword">this</span>.options = parseUrl(url);</span><br><span class="line">    <span class="keyword">this</span>.connect();</span><br><span class="line">&#125;;</span><br><span class="line">WebSocket.prototype.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;;</span><br><span class="line">WebSocket.prototype.setSocket = <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.socket = socket;</span><br><span class="line">&#125;;</span><br><span class="line">WebSocket.prototype.connect = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="keyword">new</span> Buffer(<span class="keyword">this</span>.options.protocolVersion + <span class="string">'-'</span> + <span class="built_in">Date</span>.now()).toString(<span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">let</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</span><br><span class="line">    <span class="keyword">let</span> expected = shasum.update(key + <span class="string">'258EAFA5-E914-47DA-95CA-C5ABoDC85B11'</span>).digest(<span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        port: <span class="keyword">this</span>.options.port,</span><br><span class="line">        host: <span class="keyword">this</span>.options.hostname,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Upgrade'</span>,</span><br><span class="line">            <span class="string">'Upgrade'</span>: <span class="string">'websocket'</span>,</span><br><span class="line">            <span class="string">'Sec-WebSocket-Key'</span>: key</span><br><span class="line">            <span class="string">'Sec-WebSocket-Version'</span>: <span class="number">13</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> req = http.request(options, (res, socket, upgradeHead) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.setSocket(socket);</span><br><span class="line">        <span class="keyword">this</span>.onopen();</span><br><span class="line">    &#125;);</span><br><span class="line">    req.end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Node构建WebSocket服务器"><a href="#Node构建WebSocket服务器" class="headerlink" title="Node构建WebSocket服务器"></a>Node构建WebSocket服务器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">4000</span>, <span class="string">'localhost'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'http://localhost:4000'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'upgrade'</span>, (req, socket, upgradeHead) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">new</span> Buffer(upgradeHead.length);</span><br><span class="line">    upgradeHead.copy(head);</span><br><span class="line">    <span class="keyword">let</span> key = req.headers[<span class="string">'sec-websocket-key'</span>];</span><br><span class="line">    <span class="keyword">let</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</span><br><span class="line">    key = shasum.update(key + <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>).digest(<span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">let</span> headers = [</span><br><span class="line">        <span class="string">'HTTP/1.1 101 Switching Protocols'</span>,</span><br><span class="line">        <span class="string">'Upgrade: websocket'</span>,</span><br><span class="line">        <span class="string">'Connection: Upgrade'</span>,</span><br><span class="line">        <span class="string">'Sec-WebSocket-Accept: '</span> + key,</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    socket.setNoDelay(<span class="literal">true</span>);</span><br><span class="line">    socket.write(headers.concat(<span class="string">''</span>, <span class="string">''</span>).join(<span class="string">'\r\n'</span>));</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line">    socket.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        socket.write(<span class="string">'nodejs'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="WebSocket数据传输"><a href="#WebSocket数据传输" class="headerlink" title="WebSocket数据传输"></a>WebSocket数据传输</h3><p>在握手顺利完成后，当前连接将不再进行HTTP的交互，而是开始WebSocket的数据帧协议，实现客户端与服务器端的数据交换。下图为协议升级过程示意图。</p><p><img src="/img/websocketprotocol.png" alt></p><p>为了安全考虑，客户端需要对发送的数据帧进行掩码处理，服务器一旦收到无掩码帧(比如中间拦截破坏)，连接将关闭。而服务器发送到客户端的数据帧则无须做掩码处理，同样，如果客户端收到带掩码的数据帧，连接也将关闭。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;WebSocket在客户端与服务器端的通讯中占有重要的地位，基于WebSocket客户端可以随时向服务器端发送数据，服务器也可以随时向客户端发送数据。多人在线聊天室就是基于WebSocket构建的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NODEJS" scheme="http://qinyongli.cn/tags/NODEJS/"/>
    
  </entry>
  
  <entry>
    <title>浅谈HTTP</title>
    <link href="http://qinyongli.cn/2017/10/30/%E6%B5%85%E8%B0%88HTTP/"/>
    <id>http://qinyongli.cn/2017/10/30/浅谈HTTP/</id>
    <published>2017-10-30T15:24:46.000Z</published>
    <updated>2017-11-17T06:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>作为一个WEB开发者，了解一些常用的协议是必须的，本编将总结自己在协议方面的学习。</p><a id="more"></a><h2 id="WEB始祖HTTP"><a href="#WEB始祖HTTP" class="headerlink" title="WEB始祖HTTP"></a>WEB始祖HTTP</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。伴随着计算机网络和浏览器的诞生，HTTP1.0也随之而来，处于计算机网络中的应用层，HTTP是建立在TCP协议上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如TCP建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。</p><p>HTTP得以发展是W3C和IETF两个组织和作的结果，他们最终发布了一系列RFC标准，目前最知名的HTTP标准为RFC 2616。</p><h2 id="HTTP的基本优化"><a href="#HTTP的基本优化" class="headerlink" title="HTTP的基本优化"></a>HTTP的基本优化</h2><p>影响一个HTTP网络请求的因素主要有两个: 宽带和延迟。</p><p>宽带: 如果说我们还停留在拨号上网的阶段，宽带可能成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得宽带得到极大的提升，我们就不再会担心有宽带而影响网速了。</p><p>延迟: </p><ul><li>浏览器阻塞(HOL blocking):　浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有4个连接(这个根据浏览器内核不同可能会有所差异)，超过浏览器最大连接限制，后续请求就会被阻塞。</li><li>DNS查询(DNS Lookup): 浏览器需要知道目标服务器的IP才能建立连接。将域名解析为IP的这个系统就是DNS。这个通常可以利用DNS缓存结果达到减少这个时间的目的。</li><li>建立连接(initial connection): HTTP是基于TCP协议的，浏览器最快也要在第三次握手时才能捎带HTTP请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较为明显，慢启动则对文件类大请求影响较大。</li></ul><h2 id="HTTP1-0与HTTP1-1"><a href="#HTTP1-0与HTTP1-1" class="headerlink" title="HTTP1.0与HTTP1.1"></a>HTTP1.0与HTTP1.1</h2><p>最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用在现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。主要区别体现在:</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>缓存处理，HTTP1.0中主要使用header里的If-Modified-Since，Expires来作为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略，例如Entity，If-Unmodified-Since，If-Match，If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li>宽带优化及网络连接的使用，HTTP1.0中，存在浪费宽带的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头中引入了range头域，它允许只请求资源的某个部分，即返回码206(Partial Content)，这样就方便了开发者自由的选择以便于充分选择利用宽带和连接。</li><li>错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409(Conflict)表示服务器上的某个资源被永久性的删除。</li><li>长连接，HTTP1.1支持长连接和请求流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection: keey-alive，一定程度上弥补了HTTP1.O每次请求都要创建连接的缺点。</li><li>Host头处理，在HTTP1.0中认为每一台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名(hostname)。但随着虚拟机技术的发展，在一台物理服务器上可以存在多个虚拟机，并且他们共享一个IP地址。HTTP1.1中的请求消息和响应消息都应该支持Hose头域，且请求消息中如果没有Host头域会报告一个错误(440 Bad Request)。</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>HTTP1.0在传输数据时，每次都要重新建立连接，无疑增加了大量的延迟时间，特别是移动端表现更为突出。</li><li>HTTP1.x在传输数据时，所有传输的内容都是明文的，无法保证数据的安全性。</li><li>HTTP1.x在使用时，header里携带的内容过大，在一定程度上增加了传输成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户的流量。</li><li>虽然HTTP1.x支持keep-alive，来弥补多次创建连接产生的延迟，但是keep-alive使用同样会给服务器端带来大量的性能压力，并且对于单个文件被不断请求的服务（例如图片存放网站），keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。</li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</p><p>HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><h3 id="HTTP-消息结构"><a href="#HTTP-消息结构" class="headerlink" title="HTTP 消息结构"></a>HTTP 消息结构</h3><h4 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h4><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</p><p><img src="/img/httprequest.png" alt></p><h4 id="服务器响应消息"><a href="#服务器响应消息" class="headerlink" title="服务器响应消息"></a>服务器响应消息</h4><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><p><img src="/img/httpmessage.jpg" alt></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>客户端请求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: localhost:3000</span><br><span class="line">&gt; User-Agent: curl/7.47.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>服务端响应:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-Type: text/plain</span><br><span class="line">&lt; Date: Tue, 31 Oct 2017 14:11:22 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; </span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><ul><li>GET: 最常用的方法，通常用于请求服务器发送某个资源。</li><li>POST: 起初是用来向服务器输入数据，实际上通常用来把表单数据传输到服务器。</li><li>PUT: 与GET从服务器读取文档相反，PUT方法会向服务器写入文档。</li><li>DELETE: 请求服务器删除指定的资源。</li></ul><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>HTTP状态码:</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><p>HTTP状态码分类: </p><ul><li>1**    信息，服务器收到请求，需要请求者继续执行操作</li><li>2**    成功，操作被成功接收并处理</li><li>3**    重定向，需要进一步的操作以完成请求</li><li>4**    客户端错误，请求包含语法错误或无法完成请求</li><li>5**    服务器错误，服务器在处理请求的过程中发生了错误</li></ul><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>Node的http模块包含了对HTTP处理的封装。在Node中，HTTP服务继承了TCP服务器(net模块)，它能够与多个客户端保持连接，由于其采用事件驱动的形式，并不为每一个连接创建额外的线程或进程，保持很低的内存占用，所以能实现高并发。HTTP服务与TCP服务模型有区别的地方在于，在开启keepalive后，一个TCP会话可以用于多次请求和响应。TCP服务以connection为单位进行服务，HTTP服务以request为单位进行服务。http模块即是将connection到request的过程进行了封装。</p><p><img src="/img/http.png" alt></p><p>http模块将connection到request的过程进行了封装</p><p>除此之外，http模块将连接所用套接字的读写抽象为ServerRequest和ServerResponse对象，它们分别对应请求和响应操作。在请求产生的过程中，http模块拿出连接中的传来的数据，调用二进制模块http_parser进行解析，在解析完请求报文的报头，触发request事件，调用用户的业务逻辑。该逻辑的示意图:</p><p><img src="/img/theprocessofhttp.png" alt></p><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>对TCP连接的读操作，http模块将其封装为ServerRequest对象。请求报文头部将会通过http_parser进行解析。</p><p>报头被解析后放置在req.headers属性上传递给业务逻辑以供调用。</p><p>报文体部分则抽象为一个只读流对象，如果业务逻辑需要读取报文体中的数据，则要在这个数据流结束后才能进行操作，如下所示: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//console.log(req.headers);</span></span><br><span class="line">    <span class="keyword">let</span> buffers = [];</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">        buffers.push(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> buffer = Buffer.concat(buffers);</span><br><span class="line">        res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>HTTP请求对象和HTTP响应对象是相对较底层的封装，现行的Web框架express就是在这两个对象的基础上进行高层封装完成的。</p><h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><p>HTTP响应封装了对底层连接的写操作，可以将其看成一个可写的流对象。它影响响应报文头部信息的API为res.setHeader()和res.writeHead()。在上述报文示例中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br></pre></td></tr></table></figure><p>其分为setHeader()和writeHead()两个步骤。它在http模块的封装下，实际生成如下的报文: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>我们可以调用setHeader进行多次设置，但只有调用writeHead后，报头才会写入到连接中。除此之外，http模块会自动帮你设置一些头信息，如下所示:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt; Date: Tue, 31 Oct 2017 14:11:22 GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><p>响应结束后，HTTP服务器将可能会将当前连接用于下一个请求，或者关闭连接。值得注意的是，报头是在报文体发送前发送的，一旦开始了数据的发送，writeHead()和setHeader()将不会再生效。这有协议的特性决定的。</p><h3 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server =  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="string">'127.0.0.1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server runing at http://localhost:127.0.0.1:1337/'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>NODE获取客户端IP:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.headers[<span class="string">'x-forwarded-for'</span>] || req.connection.remoteAddress || req.socket.remoteAddress;</span><br></pre></td></tr></table></figure><p>NODE获取客户端PORT:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.connection.remotePort || req.socket.remotePort;</span><br></pre></td></tr></table></figure></p><h4 id="HTTP服务器的事件"><a href="#HTTP服务器的事件" class="headerlink" title="HTTP服务器的事件"></a>HTTP服务器的事件</h4><p>如同TCP服务一样，HTTP服务器也抽象了一些事件，以供应用层使用，同样典型的是，服务器也是一个EventEmitter实例。</p><ul><li><p>connection事件: 在开始HTTP请求和响应前，客户端与服务器端需要建立底层的TCP连接，这个连接有可能因为开启了keep-alive，可以在多次请求响应之间使用；当这个连接建立时，服务器触发一次connection事件。</p></li><li><p>request事件: 建立TCP连接后，http模块底层将在数据流中抽象出HTTP请求和HTTP响应，当请求数据发送到服务器端，在解析出HTTP请求头后，将会触发该事件；在res.end()后，TCP连接可能将用于下一次请求响应。</p></li><li><p>close事件: 与TCP服务器的行为一致，调用server.close()方法停止接受新的连接，当已有的连接都断开时，触发该事件；可以server.close()传递一个回调函数来快速注册该事件。</p></li><li><p>connect事件: 当客户端发起CONNECT请求时触发，而发起CONNECT请求通常在HTTP代理时出现；如果不监听该事件，发起请求的连接将会关闭。</p></li><li><p>upgrade事件: 当客户端要求升级连接协议时，需要和服务器协商，客户端会在请求头中带上Upgrade字段，服务器端会在接受到这样的请求时触发该事件。如果不监听该事件，发起该请求的连接将会被关闭。</p></li><li><p>clientError事件: 连接的客户触发error事件时，这个错误会传递到服务器端，此时触发该事件。</p></li></ul><h3 id="HTTP客户端"><a href="#HTTP客户端" class="headerlink" title="HTTP客户端"></a>HTTP客户端</h3><blockquote><p>从协议的角度来说，现在的应用，如浏览器，其实是一个HTTP的代理，用户的行为将会通过它转化为HTTP请求报文发送给服务器端，服务器端在处理请求后，发送响应报文给代理，代理在解析报文后，将用户需要的内容呈现在界面上。HTTP服务只做两件事情: 处理HTTP请求和发送HTTP响应。</p></blockquote><p>http模块提供了一个底层API: http.request(options, connect)，用于构造HTTP客户端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">1334</span>,</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    method: <span class="string">'GET'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> req = http.request(options, res =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</span><br><span class="line">    res.setEncoding(<span class="string">'uft8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p>options参数决定了这个HTTP请求头中的内容，它的选项有如下这些。</p><ul><li>host: 服务器的域名或IP地址，默认为localhost。</li><li>hostname: 服务器名称。</li><li>port: 服务器端口，默认为80。</li><li>socketPath: Domain套接字路径。</li><li>method: HTTP请求方法，默认为GET。</li><li>path: 请求路径，默认为/。</li><li>headers: 请求头对象。</li><li>auth: Basic认证，这个值将被计算成请求头中的Authorization部分。</li></ul><h4 id="客户端事件"><a href="#客户端事件" class="headerlink" title="客户端事件:"></a>客户端事件:</h4><ul><li>response: 与服务端的request事件对应的客户端在请求发出后得到服务器端响应时，会触发该事件。</li><li>socket: 当底层连接池中建立的连接分配给当前请求对象时，触发该事件。</li><li>connect: 当客户端向服务器端发起CONNECT请求时，如果服务器响应了200状态码，客户端将会触发该事件。</li><li>upgrade: 客户端向服务器端发起Upgrade请求时，如果服务器响应了101 Switching Protocols状态，客户端将会触发该事件。</li><li>continue: 客户端向服务器端发起Expect: 100-continue头信息，以试图发送较大数据量，如果服务器端响应100 Continue状态，客户端将触发该事件。 </li></ul><blockquote><p>在ClientRequest对象中，它的事件叫做response。ClientRequest在解析响应报文时，一解析完就触发response事件，同时传递一个响应对象以供操作ClientResponse。</p></blockquote><blockquote><p>TCP和UDP都属于网络传输协议，如果要构造高效的网络应用，就应该从传输层进行着手。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;作为一个WEB开发者，了解一些常用的协议是必须的，本编将总结自己在协议方面的学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://qinyongli.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>TCP、UDP、Socket总结</title>
    <link href="http://qinyongli.cn/2017/10/28/TCP%E3%80%81UDP%E3%80%81Socket%E6%80%BB%E7%BB%93/"/>
    <id>http://qinyongli.cn/2017/10/28/TCP、UDP、Socket总结/</id>
    <published>2017-10-28T14:56:46.000Z</published>
    <updated>2017-11-17T06:07:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本篇将开启我对各种协议的理解总结。</p><a id="more"></a><h2 id="UDP与TCP与Socket"><a href="#UDP与TCP与Socket" class="headerlink" title="UDP与TCP与Socket"></a>UDP与TCP与Socket</h2><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。</p><p>Socket的英文原义是”孔”或”插座”。作为BSD UNIX的进程通信机制，取后一种意思。通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，可以用来实现不同虚拟机或不同计算机之间的通信。</p><p>socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p><p><img src="/img/socket.jpg" alt></p><h4 id="Server-Client模型"><a href="#Server-Client模型" class="headerlink" title="Server-Client模型"></a>Server-Client模型</h4><p>服务器，使用ServerSocket监听指定的端口，端口可以随意指定（由于1024以下的端口通常属于保留端口，在一些操作系统中不可以随意使用，所以建议使用大于1024的端口），等待客户连接请求，客户连接后，会话产生；在完成会话后，关闭连接。</p><p>客户端，使用Socket对网络上某一个服务器的某一个端口发出连接请求，一旦连接成功，打开会话；会话完成后，关闭Socket。客户端不需要指定打开的端口，通常临时的、动态的分配一个1024以上的端口。</p><p>Socket接口是TCP/IP网络的API，Socket接口定义了许多函数或例程，程序员可以用它们来开发TCP/IP网络上的应用程序。要学Internet上的TCP/IP网络编程，必须理解Socket接口。Socket接口设计者最先是将接口放在Unix操作系统里面的。如果了解Unix系统的输入和输出的话，就很容易了解Socket了。网络的Socket数据传输是一种特殊的I/O，Socket也是一种文件描述符。Socket也具有一个类似于打开文件的函数调用Socket（），该函数返回一个整型的Socket描述符，随后的连接建立、数据传输等操作都是通过该Socket实现的。</p><p><img src="/img/socket.png" alt></p><h4 id="常用的套接字类型2中折叠常用的Socket类型"><a href="#常用的套接字类型2中折叠常用的Socket类型" class="headerlink" title="常用的套接字类型2中折叠常用的Socket类型"></a>常用的套接字类型2中折叠常用的Socket类型</h4><ul><li>流式套接字（SOCK_STREAM）：面向连接的Socket，针对于面向连接的TCP服务应用。</li><li>数据报式套接字（SOCK_DGRAM）：无连接的Socket，对应于无连接的UDP服务应用。</li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP服务在网络应用中十分常见，目前大多数的应用都是基于TCP搭建而成。典型的HTTP、SMTP、IMAP等协议。</p><p>TCP(传输控制协议)是面向连接的、传输可靠（保证数据正确性且保证数据顺序）、用于传输大量数据（流模式）、速度快，建立连接需要开销多（时间、系统资源）。</p><h4 id="TCP服务器端"><a href="#TCP服务器端" class="headerlink" title="TCP服务器端"></a>TCP服务器端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> server = net.createServer(<span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">    socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`接受到客户端发来的数据: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">        socket.write(<span class="string">'你好'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'断开链接'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.write(<span class="string">'欢迎光临nodejs应用\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8124</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> client = net.connect(&#123;<span class="attr">port</span>: <span class="number">8124</span>&#125;, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</span><br><span class="line">    client.write(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    client.end();</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'end'</span>,() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'client disconnected'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="TCP服务事件"><a href="#TCP服务事件" class="headerlink" title="TCP服务事件"></a>TCP服务事件</h4><h5 id="服务器事件"><a href="#服务器事件" class="headerlink" title="服务器事件"></a>服务器事件</h5><p>对于通过net.createServer()创建的服务器而言，它是一个EventEmiter实例，它的自定以事件有如下几种。</p><ul><li>listening: 在调用server.listen()绑定端口或Domain Socket后触发。</li><li>connection: 每个客户端套接字连接到服务器端时触发。</li><li>close:　当服务器关闭时触发, 在调用server.close()后，服务器将停止接受新的套接字连接，但保持当前存在的连接，等待所有连接都断开后，会触发该事件。</li><li>error: 当服务器发生异常时，将会触发该事件。比如侦听一个使用中的端口，将会触发一个异常，如果不侦听error事件，服务器将会抛出异常。</li></ul><h5 id="连接事件"><a href="#连接事件" class="headerlink" title="连接事件"></a>连接事件</h5><p>服务器可以同时与多个客户端保持连接，对于每一个连接而言是典型的可写可读Stream对象。Stream对象可以用于服务器和客户端之间的通信，既可以通过data事件从一端读取另一端发来的数据，也可以通过write()方法从一端向另一端发送数据。它具有如下的自定义事件。</p><ul><li>data: 当一端调用write()发送数据时，另一端将会触发data事件，事件传递的数据即是write()发送的数据。</li><li>end: 当连接中的任意一端发送了FIN数据时，将会触发该事件。</li><li>connect: 该事件用于客户端，当套接字与服务器端连接成功时会被触发。</li><li>drain: 当任意一端调用write()发送数据时，当前这段会触发该事件。</li><li>error: 当异常发生时，触发该事件。</li><li>timeout: 当一定事件后连接不再活跃时，该事件将会被触发，通知用户当前该连接已经被闲置。</li></ul><p>另外，由于TCP套接字是可读可写的Stream对象，可以利用pipe()方法巧妙地实现管道操作，如下代码实现了一个echo服务器:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> server = net.createServer(<span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">    socket.write(<span class="string">'Echo server \r\n'</span>);</span><br><span class="line">    socket.pipe(socket);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">1337</span>, <span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP(用户数据包协议)面向非连接、传输不可靠、用于传输少量数据（数据报模式）、速度快，UDP传输的可靠性由应用层负责。</p><p>UDP报头: </p><p><img src="https://p1.ssl.qhmsg.com/dr/220__/t013b598635950ce8ea.png" alt></p><p>TCP中连接一旦建立，所有的会话都基于连接完成，客户端如果要与另一个TCP服务通讯，需要另创建一个套接字来完成连接。但在UDP中，一个套接字可以与多个UDP服务通讯，它虽然提供面向事务的简单不可靠的信息传输服务，在网络差的情况下存在丢包严重的问题，但是由于它无须连接，资源消耗低，处理快速且灵活，所以常常应用在那种偶尔丢一两个数据包也不会产生重大影响的场景，如果音频、视频等。UDP目前应用很广泛，DNS服务器是基于它实现的。</p><h4 id="创建UDP套接字"><a href="#创建UDP套接字" class="headerlink" title="创建UDP套接字"></a>创建UDP套接字</h4><p>创建UDP套接字十分简单，UDP套接字一旦创建，既可以作为客户端发送数据，也可以作为服务器端接受数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</span><br><span class="line"><span class="keyword">const</span> socket = dgram.createSocket(<span class="string">'udp4'</span>);</span><br></pre></td></tr></table></figure><p>####　创建UDP服务器端</p><p>若想让UDP套接字接收网络消息，只要调用dgram.bind(port, [address])方法对网卡和端口进行绑定即可。以下为一个完整的服务器端示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</span><br><span class="line"><span class="keyword">const</span> server = dgram.createSocket(<span class="string">'udp4'</span>);</span><br><span class="line">server.on(<span class="string">'message'</span>, (msg, rinfo) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server got: <span class="subst">$&#123;msg&#125;</span> from <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'listening'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> address = server.address();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server listening <span class="subst">$&#123;address.address&#125;</span>:<span class="subst">$&#123;address.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.bind(<span class="number">41234</span>);</span><br></pre></td></tr></table></figure><p>该套接字将接收所有网卡上41234端口上的消息。在绑定完成后，将触发listening事件。</p><h4 id="创建UDP客户端"><a href="#创建UDP客户端" class="headerlink" title="创建UDP客户端"></a>创建UDP客户端</h4><p>创建一个客户端与服务器端进行对话，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</span><br><span class="line"><span class="keyword">const</span> message = <span class="keyword">new</span> Buffer(<span class="string">"深入浅出nodejs"</span>);</span><br><span class="line"><span class="keyword">const</span> client = dgram.createSocket(<span class="string">'udp4'</span>);</span><br><span class="line">client.send(message, <span class="number">0</span>, message.length, <span class="number">41234</span>, <span class="string">'localhost'</span>, (err, bytes) =&gt; &#123;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当套接字对象用在客户端时，可以调用send()方法发送消息到网络中。send()方法的参数如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.send(buf, offset, length, port, address, [callback]);</span><br></pre></td></tr></table></figure><p>这些参数分别为要发送的Buffer、Buffer的偏移、Buffer的长度、目标端口、目标地址、发送完成后的回调。与TCP套接字的write相比,send()方法的参数列表相对复杂，但是它更灵活的地方在于可以随意发送数据到网络中的服务器端，而TCP如果要发送数据给另一个服务器端，则需要重新通过套接字构造新的连接。</p><h4 id="UDP套接字事件"><a href="#UDP套接字事件" class="headerlink" title="UDP套接字事件"></a>UDP套接字事件</h4><p>UDP套接字相对TCP套接字使用起来更简单，它只是一个EventEmitter的实例，而非Stream实例。它具备如下自定义事件:</p><ul><li>message: 当UDP套接字侦听网卡端口后，接收到消息时触发该事件，触发携带的数据为消息Buffer对象和一个远程地址消息。</li><li>listening: 当UDP套接字开始侦听时触发该事件。</li><li>close: 调用close()方法时触发该事件，并不在触发message事件。如需再次触发message事件，重新绑定即可。</li><li>error: 当异常发生时触发该事件，如果不侦听，异常将直接抛出，使进程退出。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;本篇将开启我对各种协议的理解总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://qinyongli.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用设计模式</title>
    <link href="http://qinyongli.cn/2017/10/28/JavaScript%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://qinyongli.cn/2017/10/28/JavaScript常用设计模式/</id>
    <published>2017-10-28T05:24:23.000Z</published>
    <updated>2017-11-17T06:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>模式是一种可复用的解决方案，可用于解决软件设计中遇到的常见问题，如在我们编写的JavaScript应用程序的实例中。另一种模式的方式是将解决问题的方法制作成模板，并且这些模板可应用于多种不同的情况。</p><a id="more"></a><h2 id="常用的设计模式"><a href="#常用的设计模式" class="headerlink" title="常用的设计模式"></a>常用的设计模式</h2><ul><li>工厂模式</li><li>单体模式</li><li>模块模式</li><li>代理模式</li><li>策略模式</li><li>发布-订阅模式</li><li>观察者模式</li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式是为了解决多个类似的对象声明的问题，也就是为了解决实例化对象产生的重复问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.sex = sex;</span><br><span class="line">    obj.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> CreatePerson(<span class="string">'xiaowang'</span>, <span class="string">'20'</span>, <span class="string">'boy'</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> CreatePerson(<span class="string">'mary'</span>, <span class="string">'18'</span>, <span class="string">'girl'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);<span class="comment">//xiaowang</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);<span class="comment">//may</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回都是object，无法识别对象的类型，不知道他们是哪个对象的实例。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> person1);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> person2);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>优点: 能解决多个相似的问题<br>缺点: 不能知道对象识别的问题(对象的类型不知道)</p></blockquote><h3 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h3><p>单体模式是一个用来划分命名空间并将一批属性和方法组织在一起的对象。如果它可以被实例化，那么它只能被实例化一次。</p><p>对象字面量来创建单体模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Singleton = &#123;</span><br><span class="line">    attr1: <span class="number">1</span>,</span><br><span class="line">    attr2: <span class="number">2</span>,</span><br><span class="line">    method1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.attr1;</span><br><span class="line">    &#125;,</span><br><span class="line">    method2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.attr2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>单体化模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> getInstance = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">let</span> a = getInstance(<span class="string">'aa'</span>);</span><br><span class="line"><span class="keyword">let</span> b = getInstance(<span class="string">'bb'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a == b);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a.getName());<span class="comment">//aa</span></span><br><span class="line"><span class="built_in">console</span>.log(b.getName());<span class="comment">//aa</span></span><br></pre></td></tr></table></figure><p>单体模式的优点:</p><ul><li>可以来用划分命令空间，减少全局变量。</li><li>使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。</li></ul><h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Single = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//私有变量</span></span><br><span class="line">    <span class="keyword">let</span> privateNum = <span class="number">112</span>;</span><br><span class="line">    <span class="comment">//公有变量</span></span><br><span class="line">    <span class="keyword">let</span> publicNum = <span class="number">110</span>;</span><br><span class="line">    <span class="comment">//私有函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//业务逻辑代码</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//公有函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//业务逻辑代码</span></span><br><span class="line">    &#125;；</span><br><span class="line">    <span class="comment">//返回一个对象包含公有方法和属性</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicNum,</span><br><span class="line">        publicFunc</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个妹子</span></span><br><span class="line"><span class="keyword">let</span> AGirl = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//声明一个男孩</span></span><br><span class="line"><span class="keyword">let</span> ABoy = <span class="function"><span class="keyword">function</span> (<span class="params">girl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.girl = girl;</span><br><span class="line">    <span class="comment">//送礼物给一个妹子</span></span><br><span class="line">    <span class="keyword">this</span>.sendMarriageGift = <span class="function"><span class="keyword">function</span> (<span class="params">gift</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hi '</span> + <span class="keyword">this</span>.girl.name + <span class="string">', a　boy 送你一个礼物: '</span> + gift;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//代理人</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Proxy</span> = <span class="function"><span class="keyword">function</span> (<span class="params">girl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.girl = girl;</span><br><span class="line">    <span class="keyword">this</span>.sendGift = <span class="function"><span class="keyword">function</span> (<span class="params">gift</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ABoy(girl).sendMarriageGift(gift);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> AGirl(<span class="string">'漂亮妹子'</span>));</span><br><span class="line">proxy.sendGift(<span class="string">'结婚戒'</span>);<span class="comment">//Hi 漂亮妹子, a boy 送你一个礼物：　结婚戒</span></span><br></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stragegy = &#123;</span><br><span class="line">    <span class="string">'A'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'B'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'C'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salay * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> calculateBount = <span class="function"><span class="keyword">function</span> (<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stragegy[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBount(<span class="string">'A'</span>, <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>根据状态的变化主动触发观察者队列、hashMap的回调行为。redux中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = [];</span><br><span class="line">&#125;;</span><br><span class="line">Observer.prototype.subscribe = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(fn);</span><br><span class="line">&#125;;</span><br><span class="line">Observer.prototype.unsubscribe = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = <span class="keyword">this</span>.observers.filter(<span class="function"><span class="params">_fn</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _fn !== fn;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">Observer.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        fn(val);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Ob = <span class="keyword">new</span> Observer();</span><br><span class="line"><span class="keyword">const</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`它是<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Ob.subscribe(fn1);</span><br><span class="line">Ob.subscribe(fn2);</span><br><span class="line">Ob.update(<span class="string">'nodejs'</span>);</span><br><span class="line">Ob.unsubscribe(fn2);</span><br><span class="line">Ob.update(<span class="string">'JavaScript'</span>);</span><br></pre></td></tr></table></figure><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PubSub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eventPool = [];</span><br><span class="line">&#125;;</span><br><span class="line">PubSub.prototype.publish = <span class="function"><span class="keyword">function</span>(<span class="params">topicName, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eventPool[topicName] &amp;&amp; <span class="keyword">this</span>.eventPool[topicName].forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">        callback(arg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">PubSub.prototype.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params">topicName, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> topic = <span class="keyword">this</span>.eventPool[topicName];</span><br><span class="line">    <span class="keyword">if</span>(!topic)</span><br><span class="line">        <span class="keyword">this</span>.eventPool[topicName] = [];</span><br><span class="line">    <span class="keyword">this</span>.eventPool[topicName].push(callback);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> pub = <span class="keyword">new</span> PubSub();</span><br><span class="line">pub.subscribe(<span class="string">'node'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`收到:<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">pub.publish(<span class="string">'node'</span>, <span class="string">'nodejs'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;模式是一种可复用的解决方案，可用于解决软件设计中遇到的常见问题，如在我们编写的JavaScript应用程序的实例中。另一种模式的方式是将解决问题的方法制作成模板，并且这些模板可应用于多种不同的情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://qinyongli.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JS内存</title>
    <link href="http://qinyongli.cn/2017/10/26/%E6%B5%85%E8%B0%88JS%E5%86%85%E5%AD%98/"/>
    <id>http://qinyongli.cn/2017/10/26/浅谈JS内存/</id>
    <published>2017-10-26T11:48:34.000Z</published>
    <updated>2019-03-04T12:48:54.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>与前端不同，后端是直面服务器的，所以对性能的要求更高，对内存有更高的要求。如果存在内存泄漏，跟随着时间的流逝，内存泄漏越来越多，程序运行也会越来越慢，最终崩溃。所以要想深入学习node，控制内存的使用是至关重要的。</p><a id="more"></a><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>C语言有低级的原生内存管理原语，像malloc()和free()，开发人员使用这些原语可以显式分配和释放内存。</p><p>JavaScript在创建变量时会自动分配内存，并在这些变量不被使用时自动释放内存－－－垃圾回收机制。</p><h3 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h3><p>Allocate =&gt; Use Memory =&gt; Release memory</p><ul><li>分配内存</li><li>使用内存</li><li>释放内存</li></ul><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><ul><li>所有的变量和程序中用到的数据。</li><li>程序的代码，包括操作系统的代码。</li></ul><p>编译器和操作系统共同帮助开发者完成大部分的内存管理。</p><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><h4 id="JavaScript中的内存分配"><a href="#JavaScript中的内存分配" class="headerlink" title="JavaScript中的内存分配"></a>JavaScript中的内存分配</h4><p>JavaScript在开发者声明值的时候自动分配内存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">374</span>;<span class="comment">//为数值分配内存</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'sessionstack'</span>;<span class="comment">//为字符串分配内存</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="literal">null</span>,</span><br><span class="line">&#125;;<span class="comment">//为对象和它包含的值分配内存</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="literal">null</span>, <span class="string">'str'</span>];<span class="comment">//为数组和它包含的值分配内存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">3</span>;</span><br><span class="line">&#125;;<span class="comment">//为函数(可调用的对象)分配内存</span></span><br><span class="line"><span class="comment">//函数表达式也会分配一个对象</span></span><br></pre></td></tr></table></figure><h4 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h4><h5 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h5><h5 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;与前端不同，后端是直面服务器的，所以对性能的要求更高，对内存有更高的要求。如果存在内存泄漏，跟随着时间的流逝，内存泄漏越来越多，程序运行也会越来越慢，最终崩溃。所以要想深入学习node，控制内存的使用是至关重要的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://qinyongli.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈curry化</title>
    <link href="http://qinyongli.cn/2017/10/25/%E6%B5%85%E8%B0%88curry%E5%8C%96/"/>
    <id>http://qinyongli.cn/2017/10/25/浅谈curry化/</id>
    <published>2017-10-25T12:12:02.000Z</published>
    <updated>2017-11-17T06:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在函数式编程中我了解到了柯里化，并且觉得它很有意思，所以对它的实现原理进行了探索，其中难点还真不少。</p><a id="more"></a><h2 id="curry化的概念"><a href="#curry化的概念" class="headerlink" title="curry化的概念"></a>curry化的概念</h2><p>curry 的概念很简单：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p><p>你可以一次性地调用 curry 函数，也可以每次只传一个参数分多次调用</p><h2 id="curry化的实现代码"><a href="#curry化的实现代码" class="headerlink" title="curry化的实现代码"></a>curry化的实现代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sub_curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args.concat(<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn, len</span>) </span>&#123;</span><br><span class="line">    len = len || fn.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &lt; len) &#123;</span><br><span class="line">            <span class="keyword">let</span> combined = [fn].concat(<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>));</span><br><span class="line">            <span class="keyword">return</span> curry(sub_curry.apply(<span class="keyword">this</span>, combined), len - <span class="built_in">arguments</span>.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="curry化使用的哪些知识点"><a href="#curry化使用的哪些知识点" class="headerlink" title="curry化使用的哪些知识点"></a>curry化使用的哪些知识点</h2><ul><li>闭包</li><li>递归</li></ul><h2 id="curry难点解析"><a href="#curry难点解析" class="headerlink" title="curry难点解析"></a>curry难点解析</h2><p>难点是下面这句话的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub_curry.apply(<span class="keyword">this</span>, combined)</span><br></pre></td></tr></table></figure><p>这个语句返回一个闭包，并且这个闭包中的fn是前面一个函数。</p><p>附上一张图理解。</p><p><img src="/img/closure.png" alt></p><p>这个最终的目的就是把所有的参数传递给fn调用</p><p>附上演示的栗子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> multiply = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b * c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> multiplyCurry = curry(multiply);</span><br><span class="line"><span class="built_in">console</span>.log(multiplyCurry(<span class="number">3</span>)(<span class="number">2</span>)(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//=&gt;24</span></span><br></pre></td></tr></table></figure><blockquote><p>另一种实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 另一种简单实现，参数只能从右到左传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCurry</span>(<span class="params">func, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arity = func.length;</span><br><span class="line">    <span class="keyword">var</span> args = args || [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        [].push.apply(_args, args);</span><br><span class="line">        <span class="comment">// 如果参数个数小于最初的func.length，则递归调用，继续收集参数</span></span><br><span class="line">        <span class="keyword">if</span> (_args.length &lt; arity) &#123;</span><br><span class="line">            <span class="keyword">return</span> createCurry.call(<span class="keyword">this</span>, func, _args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 参数收集完毕，则执行func</span></span><br><span class="line">        <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在函数式编程中我了解到了柯里化，并且觉得它很有意思，所以对它的实现原理进行了探索，其中难点还真不少。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://qinyongli.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>FP-Pointfree编程指南</title>
    <link href="http://qinyongli.cn/2017/10/25/FP-Pointfree%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/"/>
    <id>http://qinyongli.cn/2017/10/25/FP-Pointfree编程指南/</id>
    <published>2017-10-25T05:55:32.000Z</published>
    <updated>2017-11-17T06:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><a id="more"></a><h2 id="Pointfree"><a href="#Pointfree" class="headerlink" title="Pointfree"></a>Pointfree</h2><h3 id="Pointfree概念"><a href="#Pointfree概念" class="headerlink" title="Pointfree概念"></a>Pointfree概念</h3><p>pointfree 模式指的是，永远不必说出你的数据</p><p>不使用所要处理的值，只合成运算过程。</p><p>example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> compose = <span class="function"><span class="keyword">function</span> (<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> addOne = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</span><br><span class="line"><span class="keyword">let</span> addOneSquare = compose(square, addOne);</span><br><span class="line">addOneSquare(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//=&gt;9</span></span><br></pre></td></tr></table></figure><p>上面一个栗子，把两个函数组合，然后求值。</p><p>addOneThenSquare是一个合成函数。定义它的时候，根本不需要提到要处理的值，这就是 Pointfree。</p><h3 id="Pointfree的本质"><a href="#Pointfree的本质" class="headerlink" title="Pointfree的本质"></a>Pointfree的本质</h3><p>Pointfree 的本质就是使用一些通用的函数，组合出各种复杂运算。上层运算不要直接操作数据，而是通过底层函数去处理。这就要求，将一些常用的操作封装成函数。</p><p>example: 读取对象的role属性，不要直接写成obj.role, 而是要把这个操作封装成函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prop = <span class="function">(<span class="params">p, obj</span>) =&gt;</span> obj[p];</span><br><span class="line"><span class="keyword">let</span> propRole = curry(prop)(<span class="string">'role'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://qinyongli.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈TCP/IP</title>
    <link href="http://qinyongli.cn/2017/10/21/%E6%B5%85%E8%B0%88TCP-IP/"/>
    <id>http://qinyongli.cn/2017/10/21/浅谈TCP-IP/</id>
    <published>2017-10-21T14:46:48.000Z</published>
    <updated>2017-11-17T06:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>作为一名计算机科学与技术的工科生，了解计算机网络基础是必须的。网络通讯遍布在我们身边，从本博客开始，将启航我在计算机网络上的系列学习。</p><a id="more"></a><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>OSI 模型(开放系统互联模型)是一个由国际标准化组织(ISO)提出概念模型,试图提供一个使各种不同的计算机和网络在世界范围内实现互联的标准框架。</p><p>OSI　将计算机网络体系结构划分为七层,每层都可以提供抽象良好的接口。了解 OSI 模型有助于理解实际上互联网络的工业标准——TCP/IP 协议。</p><p>七层协议，从下往上</p><ol><li>物理层(网络物理硬件)</li><li>链路层(网络特有的链路接口)</li><li>网络层(IP)</li><li>传输层(TCP/UDP)</li><li>会话层(通信连接/维持会话)</li><li>表示层(加密/解密等)</li><li>应用层(HTTP、SMTP、IMAP等)</li></ol><p>附上三个图促进理解</p><p><img src="/img/OSI1.jpg" alt="OSI图片"></p><p><img src="/img/OSI2.gif" alt="OSI图片"></p><p><img src="/img/OSI3.png" alt="OSI图片"></p><blockquote><p>物理地址，又称网卡的硬件MAC地址(处于数据链路层)负责局域网通讯，IP地址(处于网络层)负责外网通讯</p></blockquote><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>TCP/IP模型也被称作DoD模型(Department of Defense Model)。TCP/IP字面上代表了两个协议：TCP（传输控制协议）和IP（网际协议）。但TCP/IP协议不是TCP和IP这两个协议的合称，而是指因特网整个TCP/IP协议族。从协议分层模型方面来讲，TCP/IP由四个层次组成:网络接口层、网络层、传输层、应用层。TCP/IP通讯协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。</p><blockquote><p>OSI模型所分的七层,在实际应用中,往往有一些层被整合,或者功能分散到其他层去。</p></blockquote><blockquote><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></blockquote><blockquote><p>TCP/IP 的设计,是吸取了分层模型的精华思想——封装。每层对上一层提供服务的时候,上一层的数据结构是黑盒,直接作为本层的数据,而不需要关心上一层协议的任何细节</p></blockquote><p>四层模型:</p><p><img src="/img/tipcip&amp;osi.png" alt="tcp/ip四层模型图"></p><p><img src="/img/application.png" alt="tcp/ip图片"></p><p>TCP/IP 分层模型的分层以以太网上传输 UDP 数据包如图所示</p><p><img src="/img/TCPIP.png" alt="tcp/ip图片"></p><p>各层中的协议</p><p><img src="/img/protocol.jpg" alt></p><p><img src="/img/tcpipstream.jpg" alt="tcpip通讯流"></p><p>基于tcp的文件传输(ftp－port21)</p><p><img src="/img/datapackage.png" alt></p><p>基于TCP和UDP的数据封装及解析示例如下：</p><p><img src="/img/package.jpg" alt></p><p>TCP数据包</p><p><img src="/img/tcppackage.jpg" alt></p><p>tcp在真正连接前要经过三次握手，断开连接需要经过四次挥手</p><p>TCP三次握手</p><p><img src="/img/threeShake.png" alt></p><p>TCP四次挥手</p><ul><li><p>第一次挥手</p><p>  主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</p></li><li><p>第二次挥手</p><p>  被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）</p></li><li><p>第三次挥手</p><p>  被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了</p></li><li><p>第四次挥手</p><p>  主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p></li></ul><p><img src="/img/waved.jpg" alt="四次挥手图片"></p><h3 id="IP数据包"><a href="#IP数据包" class="headerlink" title="IP数据包"></a>IP数据包</h3><p>以太网数据包(packet)的大小是固定的，最初是1518字节，后来增加到1522字节。其中，1500字节是负载(pyload)，22字节是头部信息(head)。</p><p>IP数据包在以太网数据包的负载里面，它也有自己的头信息，最少需要20字节，所以IP数据包的负载最多为1480字节。</p><p>IP数据包</p><p><img src="/img/ipPackage.png" alt="paket数据包"></p><blockquote><p>IP 数据包在以太网数据包里面，TCP 数据包在 IP 数据包里面。</p></blockquote><p>TCP 数据包在 IP 数据包的负载里面。它的头信息最少也需要20字节，因此 TCP 数据包的最大负载是 1480 - 20 = 1460 字节。由于 IP 和 TCP 协议往往有额外的头信息，所以 TCP 负载实际为1400字节左右。</p><p>因此，一条1500字节的信息需要两个 TCP 数据包。HTTP/2 协议的一大改进， 就是压缩 HTTP 协议的头信息，使得一个 HTTP 请求可以放在一个 TCP 数据包里面，而不是分成多个，这样就提高了速度。</p><p><img src="/img/packet2.png" alt="packet数据包"></p><p>（图片说明：以太网数据包的负载是1500字节，TCP 数据包的负载在1400字节左右。）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;作为一名计算机科学与技术的工科生，了解计算机网络基础是必须的。网络通讯遍布在我们身边，从本博客开始，将启航我在计算机网络上的系列学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://qinyongli.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>浅谈MVX</title>
    <link href="http://qinyongli.cn/2017/10/21/%E6%B5%85%E8%B0%88MVX/"/>
    <id>http://qinyongli.cn/2017/10/21/浅谈MVX/</id>
    <published>2017-10-21T05:06:30.000Z</published>
    <updated>2017-11-17T06:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>MVC框架最早出现在Java领域，然后慢慢的在前端开发中也被提到，后来又出现了MVP，以及现在最成熟的MVVM</p><a id="more"></a><h2 id="MVX"><a href="#MVX" class="headerlink" title="MVX"></a>MVX</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC（Model-View-Controller）是应用最广泛的软件架构之一，一般MVC分为: Model(模型)、Controller(控制器)和View(视图)。这主要是基于分层的目的，让彼此的职责分开。</p><p>控制器（Controller），一组行为的集合。(业务逻辑)</p><p>模型（Model），数据相关的操作和封装。(数据保存)</p><p>视图（View），视图的渲染。(用户界面)</p><p>View一般通过Controler来和Model进行联系的。Controller是Model和View的协调者，View和Model不直接联系。基本联系都是单项的。</p><p><img src="http://image.beekka.com/blog/2015/bg2015020105.png" alt></p><ol><li>View 传送指令到Controler</li><li>Controller 完成业务逻辑，要求 Model 改变状态</li><li>Model 将新的数据发送到　View，用户得到反馈</li></ol><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p><p><img src="http://image.beekka.com/blog/2015/bg2015020106.png" alt></p><p>另一种是直接通过controller接受指令。</p><p><img src="http://image.beekka.com/blog/2015/bg2015020107.png" alt></p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p>MVP模式将 Controller改名为Persenter,　同时改变了通信方向。</p><p><img src="http://image.beekka.com/blog/2015/bg2015020109.png" alt></p><ol><li>各部分之间的通信，都是双向的。</li><li>View 与 Model不发生联系。都通过Persenter传递。</li><li>View 非常薄, 不部署任何业务逻辑，称为”被动视图”，即没有任何主动性，而Persenter非常厚，所有逻辑都部署在那里。</li></ol><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM模式将Persenter改名为ViewModel，基本上与MVP完全一致</p><p><img src="http://image.beekka.com/blog/2015/bg2015020110.png" alt></p><p>唯一的区别是，它采用双向绑定(data-binding): View的变动，自动反映在ViewModel，反之亦然。Angular和Vue采用这种模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;MVC框架最早出现在Java领域，然后慢慢的在前端开发中也被提到，后来又出现了MVP，以及现在最成熟的MVVM&lt;/p&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="http://qinyongli.cn/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Web缓存</title>
    <link href="http://qinyongli.cn/2017/10/19/%E6%B5%85%E8%B0%88Web%E7%BC%93%E5%AD%98/"/>
    <id>http://qinyongli.cn/2017/10/19/浅谈Web缓存/</id>
    <published>2017-10-19T00:48:57.000Z</published>
    <updated>2017-11-17T06:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在开发当中，性能至关重要，然而判断一个网站的性能最直观的就是看到网页打开的速度。其中提高网页反应速度的一个方式就是使用缓存。一个优秀的缓存策略可以缩短网页请求的距离，减少延迟，使缓存文件得到重复利用，减少冠带，降低网络负荷。</p><a id="more"></a><h2 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h2><ul><li>数据库缓存</li><li>代理服务器缓存</li><li>CDN缓存</li><li>浏览器缓存</li></ul><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>页面的缓存状态是由header决定的，header的参数有四种。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>其优先级要比Expires高</p><h5 id="max-age"><a href="#max-age" class="headerlink" title="max-age"></a>max-age</h5><p>单位为s，指定设置缓存最大的有效时间，定义时间的长短。当浏览器向服务器发送请求过后，在max-age这段时间里浏览器就不会再向服务器发送请求了。</p><p>example:</p><p>服务器设置缓存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url == <span class="string">'/'</span>) &#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">        <span class="keyword">new</span> fs.createReadStream(<span class="string">'./index.html'</span>).pipe(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url == <span class="string">'/request'</span>) &#123;</span><br><span class="line">        res.setHeader(<span class="string">'Cache-Control'</span>, <span class="string">`max-age=<span class="subst">$&#123;<span class="number">60</span>*<span class="number">1</span>&#125;</span>`</span>);<span class="comment">//1minutes</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">        res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url == <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">7000</span>, <span class="string">'localhost'</span>);</span><br></pre></td></tr></table></figure><p>客户端通过ajax请求数据，浏览器刷新的方式，cache缓存不没有效果的，所以要通过不刷新的ajax方式才能看到效果。</p><p><img src="/img/cache-control.png" alt></p><h5 id="s-maxage"><a href="#s-maxage" class="headerlink" title="s-maxage"></a>s-maxage</h5><p>单位为s，同max-age，只是用于共享缓存(比如CDN缓存)</p><p>比如，当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。也就是说max-age用于普通的缓存，而s-maxage用于代理缓存。<br>如果存在s-maxage，则会覆盖掉max-age和Expires header</p><h5 id="public"><a href="#public" class="headerlink" title="public"></a>public</h5><p>指定响应会被缓存，并且在多用户间共享。也就是下图的意思。如果没有指定public还是private，则默认为public</p><h5 id="private"><a href="#private" class="headerlink" title="private"></a>private</h5><p>响应只作为私有的缓存，不能在用户间共享。如果要求HTTP认证，响应会自动设置为private</p><h5 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a>no-cache</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'Cache-Control'</span>, <span class="string">'no-cache'</span>);</span><br></pre></td></tr></table></figure><p>设置了no-cache之后并不代表浏览器不缓存，而是在使用缓存前要向服务器确认资源是否被更改。</p><h5 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h5><p>绝对禁止缓存，一看就知道如果用了这个命令当然就是不会进行缓存，每次请求资源都要从服务器重新获取</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>单位为毫秒ms，缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">1</span>).toUTCString();<span class="comment">//1minute</span></span><br><span class="line">res.setHeader(<span class="string">'Expires'</span>, expires);</span><br></pre></td></tr></table></figure><p><img src="/img/expires.png" alt></p><h4 id="Last-modified"><a href="#Last-modified" class="headerlink" title="Last-modified"></a>Last-modified</h4><p>服务器端文件的最后修改时间，需要和cache-control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。</p><p>handle函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handle = <span class="function">(<span class="params">req, res, filename</span>) =&gt;</span> &#123;</span><br><span class="line">fs.stat(filename, (err, stat) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> lastModified = stat.mtime.toUTCString();</span><br><span class="line"><span class="keyword">if</span>(lastModified == req.headers[<span class="string">'if-modified-since'</span>]) &#123;</span><br><span class="line">res.writeHead(<span class="number">304</span>, <span class="string">'Not Modified'</span>);</span><br><span class="line">res.end();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.setHeader(<span class="string">'Last-Modified'</span>, lastModified);</span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line"><span class="keyword">new</span> fs.createReadStream(filename).pipe(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。浏览器会将这串字符串传回服务器，验证资源是否已经修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getHash = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</span><br><span class="line"><span class="keyword">return</span> shasum.update(str).digest(<span class="string">'base64'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handle = <span class="function">(<span class="params">req, res, filename</span>) =&gt;</span> &#123;</span><br><span class="line">fs.readFile(filename, (err, filedata) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> hash = getHash(filedata);</span><br><span class="line"><span class="keyword">let</span> noneMatch = req.headers[<span class="string">'if-none-match'</span>];</span><br><span class="line"><span class="keyword">if</span> (hash == noneMatch) &#123;</span><br><span class="line">res.writeHead(<span class="number">304</span>, <span class="string">'Not Modified'</span>);</span><br><span class="line">res.end();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.setHeader(<span class="string">'ETag'</span>, hash);</span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">res.end(filedata);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在开发当中，性能至关重要，然而判断一个网站的性能最直观的就是看到网页打开的速度。其中提高网页反应速度的一个方式就是使用缓存。一个优秀的缓存策略可以缩短网页请求的距离，减少延迟，使缓存文件得到重复利用，减少冠带，降低网络负荷。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NODEJS" scheme="http://qinyongli.cn/tags/NODEJS/"/>
    
  </entry>
  
  <entry>
    <title>新的hexo</title>
    <link href="http://qinyongli.cn/2017/10/18/%E6%96%B0%E7%9A%84hexo/"/>
    <id>http://qinyongli.cn/2017/10/18/新的hexo/</id>
    <published>2017-10-18T13:40:52.000Z</published>
    <updated>2017-11-17T06:12:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新的博客"><a href="#新的博客" class="headerlink" title="新的博客"></a>新的博客</h1><p>哎，前段时间为了装Ubuntu系统，在备份中不小心丢失了那些以前写的原生的博客资源。从本站开始，我要重新启航自己的博客生活，希望能和大家一起分享自己的技术心得，我们一起学习成长。一步一步提高自己的技能点，早日实现自己的技术之梦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新的博客&quot;&gt;&lt;a href=&quot;#新的博客&quot; class=&quot;headerlink&quot; title=&quot;新的博客&quot;&gt;&lt;/a&gt;新的博客&lt;/h1&gt;&lt;p&gt;哎，前段时间为了装Ubuntu系统，在备份中不小心丢失了那些以前写的原生的博客资源。从本站开始，我要重新启航自己的博客生活，
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://qinyongli.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
